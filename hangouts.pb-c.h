/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: hangouts.proto */

#ifndef PROTOBUF_C_hangouts_2eproto__INCLUDED
#define PROTOBUF_C_hangouts_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1000002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _DoNotDisturbSetting DoNotDisturbSetting;
typedef struct _NotificationSettings NotificationSettings;
typedef struct _ConversationId ConversationId;
typedef struct _ParticipantId ParticipantId;
typedef struct _DeviceStatus DeviceStatus;
typedef struct _Presence Presence;
typedef struct _PresenceResult PresenceResult;
typedef struct _ClientIdentifier ClientIdentifier;
typedef struct _ClientPresenceState ClientPresenceState;
typedef struct _UserEventState UserEventState;
typedef struct _Formatting Formatting;
typedef struct _LinkData LinkData;
typedef struct _Segment Segment;
typedef struct _PlusPhoto PlusPhoto;
typedef struct _PlusPhoto__Thumbnail PlusPhoto__Thumbnail;
typedef struct _Place Place;
typedef struct _Place__RepresentativeImage Place__RepresentativeImage;
typedef struct _EmbedItem EmbedItem;
typedef struct _Attachment Attachment;
typedef struct _MessageContent MessageContent;
typedef struct _EventAnnotation EventAnnotation;
typedef struct _ChatMessage ChatMessage;
typedef struct _MembershipChange MembershipChange;
typedef struct _ConversationRename ConversationRename;
typedef struct _HangoutEvent HangoutEvent;
typedef struct _OTRModification OTRModification;
typedef struct _HashModifier HashModifier;
typedef struct _Event Event;
typedef struct _UserReadState UserReadState;
typedef struct _DeliveryMedium DeliveryMedium;
typedef struct _DeliveryMediumOption DeliveryMediumOption;
typedef struct _UserConversationState UserConversationState;
typedef struct _ConversationParticipantData ConversationParticipantData;
typedef struct _Conversation Conversation;
typedef struct _EasterEgg EasterEgg;
typedef struct _BlockStateChange BlockStateChange;
typedef struct _Photo Photo;
typedef struct _ExistingMedia ExistingMedia;
typedef struct _EventRequestHeader EventRequestHeader;
typedef struct _ClientVersion ClientVersion;
typedef struct _RequestHeader RequestHeader;
typedef struct _ResponseHeader ResponseHeader;
typedef struct _Entity Entity;
typedef struct _EntityProperties EntityProperties;
typedef struct _ConversationState ConversationState;
typedef struct _EventContinuationToken EventContinuationToken;
typedef struct _EntityLookupSpec EntityLookupSpec;
typedef struct _ConfigurationBit ConfigurationBit;
typedef struct _RichPresenceState RichPresenceState;
typedef struct _RichPresenceEnabledState RichPresenceEnabledState;
typedef struct _DesktopOffSetting DesktopOffSetting;
typedef struct _DesktopOffState DesktopOffState;
typedef struct _DndSetting DndSetting;
typedef struct _PresenceStateSetting PresenceStateSetting;
typedef struct _MoodMessage MoodMessage;
typedef struct _MoodContent MoodContent;
typedef struct _MoodSetting MoodSetting;
typedef struct _MoodState MoodState;
typedef struct _DeleteAction DeleteAction;
typedef struct _InviteeID InviteeID;
typedef struct _Country Country;
typedef struct _DesktopSoundSetting DesktopSoundSetting;
typedef struct _PhoneData PhoneData;
typedef struct _Phone Phone;
typedef struct _I18nData I18nData;
typedef struct _PhoneNumber PhoneNumber;
typedef struct _SuggestedContactGroupHash SuggestedContactGroupHash;
typedef struct _SuggestedContact SuggestedContact;
typedef struct _SuggestedContactGroup SuggestedContactGroup;
typedef struct _StateUpdate StateUpdate;
typedef struct _StateUpdateHeader StateUpdateHeader;
typedef struct _BatchUpdate BatchUpdate;
typedef struct _EventNotification EventNotification;
typedef struct _SetFocusNotification SetFocusNotification;
typedef struct _SetTypingNotification SetTypingNotification;
typedef struct _SetConversationNotificationLevelNotification SetConversationNotificationLevelNotification;
typedef struct _ReplyToInviteNotification ReplyToInviteNotification;
typedef struct _WatermarkNotification WatermarkNotification;
typedef struct _ConversationViewModification ConversationViewModification;
typedef struct _EasterEggNotification EasterEggNotification;
typedef struct _SelfPresenceNotification SelfPresenceNotification;
typedef struct _DeleteActionNotification DeleteActionNotification;
typedef struct _PresenceNotification PresenceNotification;
typedef struct _BlockNotification BlockNotification;
typedef struct _SetNotificationSettingNotification SetNotificationSettingNotification;
typedef struct _RichPresenceEnabledStateNotification RichPresenceEnabledStateNotification;
typedef struct _ConversationSpec ConversationSpec;
typedef struct _AddUserRequest AddUserRequest;
typedef struct _AddUserResponse AddUserResponse;
typedef struct _CreateConversationRequest CreateConversationRequest;
typedef struct _CreateConversationResponse CreateConversationResponse;
typedef struct _DeleteConversationRequest DeleteConversationRequest;
typedef struct _DeleteConversationResponse DeleteConversationResponse;
typedef struct _EasterEggRequest EasterEggRequest;
typedef struct _EasterEggResponse EasterEggResponse;
typedef struct _GetConversationRequest GetConversationRequest;
typedef struct _GetConversationResponse GetConversationResponse;
typedef struct _GetEntityByIdRequest GetEntityByIdRequest;
typedef struct _GetEntityByIdResponse GetEntityByIdResponse;
typedef struct _GetSuggestedEntitiesRequest GetSuggestedEntitiesRequest;
typedef struct _GetSuggestedEntitiesResponse GetSuggestedEntitiesResponse;
typedef struct _GetSelfInfoRequest GetSelfInfoRequest;
typedef struct _GetSelfInfoResponse GetSelfInfoResponse;
typedef struct _QueryPresenceRequest QueryPresenceRequest;
typedef struct _QueryPresenceResponse QueryPresenceResponse;
typedef struct _RemoveUserRequest RemoveUserRequest;
typedef struct _RemoveUserResponse RemoveUserResponse;
typedef struct _RenameConversationRequest RenameConversationRequest;
typedef struct _RenameConversationResponse RenameConversationResponse;
typedef struct _SearchEntitiesRequest SearchEntitiesRequest;
typedef struct _SearchEntitiesResponse SearchEntitiesResponse;
typedef struct _SendChatMessageRequest SendChatMessageRequest;
typedef struct _SendChatMessageResponse SendChatMessageResponse;
typedef struct _SetActiveClientRequest SetActiveClientRequest;
typedef struct _SetActiveClientResponse SetActiveClientResponse;
typedef struct _SetConversationLevelRequest SetConversationLevelRequest;
typedef struct _SetConversationLevelResponse SetConversationLevelResponse;
typedef struct _SetConversationNotificationLevelRequest SetConversationNotificationLevelRequest;
typedef struct _SetConversationNotificationLevelResponse SetConversationNotificationLevelResponse;
typedef struct _SetFocusRequest SetFocusRequest;
typedef struct _SetFocusResponse SetFocusResponse;
typedef struct _SetPresenceRequest SetPresenceRequest;
typedef struct _SetPresenceResponse SetPresenceResponse;
typedef struct _SetTypingRequest SetTypingRequest;
typedef struct _SetTypingResponse SetTypingResponse;
typedef struct _SyncAllNewEventsRequest SyncAllNewEventsRequest;
typedef struct _SyncAllNewEventsResponse SyncAllNewEventsResponse;
typedef struct _SyncRecentConversationsRequest SyncRecentConversationsRequest;
typedef struct _SyncRecentConversationsResponse SyncRecentConversationsResponse;
typedef struct _UpdateWatermarkRequest UpdateWatermarkRequest;
typedef struct _UpdateWatermarkResponse UpdateWatermarkResponse;


/* --- enums --- */

typedef enum _PlusPhoto__MediaType {
  PLUS_PHOTO__MEDIA_TYPE__MEDIA_TYPE_UNKNOWN = 0,
  PLUS_PHOTO__MEDIA_TYPE__MEDIA_TYPE_PHOTO = 1,
  PLUS_PHOTO__MEDIA_TYPE__MEDIA_TYPE_ANIMATED_PHOTO = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PLUS_PHOTO__MEDIA_TYPE)
} PlusPhoto__MediaType;
typedef enum _Entity__PastHangoutState {
  ENTITY__PAST_HANGOUT_STATE__PAST_HANGOUT_STATE_UNKNOWN = 0,
  ENTITY__PAST_HANGOUT_STATE__PAST_HANGOUT_STATE_HAD_PAST_HANGOUT = 1,
  ENTITY__PAST_HANGOUT_STATE__PAST_HANGOUT_STATE_NO_PAST_HANGOUT = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ENTITY__PAST_HANGOUT_STATE)
} Entity__PastHangoutState;
typedef enum _ActiveClientState {
  ACTIVE_CLIENT_STATE__ACTIVE_CLIENT_STATE_NO_ACTIVE = 0,
  ACTIVE_CLIENT_STATE__ACTIVE_CLIENT_STATE_IS_ACTIVE = 1,
  ACTIVE_CLIENT_STATE__ACTIVE_CLIENT_STATE_OTHER_ACTIVE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ACTIVE_CLIENT_STATE)
} ActiveClientState;
typedef enum _FocusType {
  FOCUS_TYPE__FOCUS_TYPE_UNKNOWN = 0,
  FOCUS_TYPE__FOCUS_TYPE_FOCUSED = 1,
  FOCUS_TYPE__FOCUS_TYPE_UNFOCUSED = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FOCUS_TYPE)
} FocusType;
typedef enum _FocusDevice {
  FOCUS_DEVICE__FOCUS_DEVICE_UNSPECIFIED = 0,
  FOCUS_DEVICE__FOCUS_DEVICE_DESKTOP = 20,
  FOCUS_DEVICE__FOCUS_DEVICE_MOBILE = 300
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FOCUS_DEVICE)
} FocusDevice;
typedef enum _TypingType {
  TYPING_TYPE__TYPING_TYPE_UNKNOWN = 0,
  TYPING_TYPE__TYPING_TYPE_STARTED = 1,
  TYPING_TYPE__TYPING_TYPE_PAUSED = 2,
  TYPING_TYPE__TYPING_TYPE_STOPPED = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TYPING_TYPE)
} TypingType;
typedef enum _ClientPresenceStateType {
  CLIENT_PRESENCE_STATE_TYPE__CLIENT_PRESENCE_STATE_UNKNOWN = 0,
  CLIENT_PRESENCE_STATE_TYPE__CLIENT_PRESENCE_STATE_NONE = 1,
  CLIENT_PRESENCE_STATE_TYPE__CLIENT_PRESENCE_STATE_DESKTOP_IDLE = 30,
  CLIENT_PRESENCE_STATE_TYPE__CLIENT_PRESENCE_STATE_DESKTOP_ACTIVE = 40
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLIENT_PRESENCE_STATE_TYPE)
} ClientPresenceStateType;
typedef enum _NotificationLevel {
  NOTIFICATION_LEVEL__NOTIFICATION_LEVEL_UNKNOWN = 0,
  NOTIFICATION_LEVEL__NOTIFICATION_LEVEL_QUIET = 10,
  NOTIFICATION_LEVEL__NOTIFICATION_LEVEL_RING = 30
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(NOTIFICATION_LEVEL)
} NotificationLevel;
typedef enum _SegmentType {
  SEGMENT_TYPE__SEGMENT_TYPE_TEXT = 0,
  SEGMENT_TYPE__SEGMENT_TYPE_LINE_BREAK = 1,
  SEGMENT_TYPE__SEGMENT_TYPE_LINK = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SEGMENT_TYPE)
} SegmentType;
typedef enum _ItemType {
  ITEM_TYPE__ITEM_TYPE_THING = 0,
  ITEM_TYPE__ITEM_TYPE_PLUS_PHOTO = 249,
  ITEM_TYPE__ITEM_TYPE_PLACE = 335,
  ITEM_TYPE__ITEM_TYPE_PLACE_V2 = 340
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ITEM_TYPE)
} ItemType;
typedef enum _MembershipChangeType {
  MEMBERSHIP_CHANGE_TYPE__MEMBERSHIP_CHANGE_TYPE_JOIN = 1,
  MEMBERSHIP_CHANGE_TYPE__MEMBERSHIP_CHANGE_TYPE_LEAVE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MEMBERSHIP_CHANGE_TYPE)
} MembershipChangeType;
typedef enum _HangoutEventType {
  HANGOUT_EVENT_TYPE__HANGOUT_EVENT_TYPE_UNKNOWN = 0,
  HANGOUT_EVENT_TYPE__HANGOUT_EVENT_TYPE_START = 1,
  HANGOUT_EVENT_TYPE__HANGOUT_EVENT_TYPE_END = 2,
  HANGOUT_EVENT_TYPE__HANGOUT_EVENT_TYPE_JOIN = 3,
  HANGOUT_EVENT_TYPE__HANGOUT_EVENT_TYPE_LEAVE = 4,
  HANGOUT_EVENT_TYPE__HANGOUT_EVENT_TYPE_COMING_SOON = 5,
  HANGOUT_EVENT_TYPE__HANGOUT_EVENT_TYPE_ONGOING = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HANGOUT_EVENT_TYPE)
} HangoutEventType;
typedef enum _OffTheRecordToggle {
  OFF_THE_RECORD_TOGGLE__OFF_THE_RECORD_TOGGLE_UNKNOWN = 0,
  OFF_THE_RECORD_TOGGLE__OFF_THE_RECORD_TOGGLE_ENABLED = 1,
  OFF_THE_RECORD_TOGGLE__OFF_THE_RECORD_TOGGLE_DISABLED = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(OFF_THE_RECORD_TOGGLE)
} OffTheRecordToggle;
typedef enum _OffTheRecordStatus {
  OFF_THE_RECORD_STATUS__OFF_THE_RECORD_STATUS_UNKNOWN = 0,
  OFF_THE_RECORD_STATUS__OFF_THE_RECORD_STATUS_OFF_THE_RECORD = 1,
  OFF_THE_RECORD_STATUS__OFF_THE_RECORD_STATUS_ON_THE_RECORD = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(OFF_THE_RECORD_STATUS)
} OffTheRecordStatus;
typedef enum _SourceType {
  SOURCE_TYPE__SOURCE_TYPE_UNKNOWN = 0
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SOURCE_TYPE)
} SourceType;
typedef enum _EventType {
  EVENT_TYPE__EVENT_TYPE_UNKNOWN = 0,
  EVENT_TYPE__EVENT_TYPE_REGULAR_CHAT_MESSAGE = 1,
  EVENT_TYPE__EVENT_TYPE_SMS = 2,
  EVENT_TYPE__EVENT_TYPE_VOICEMAIL = 3,
  EVENT_TYPE__EVENT_TYPE_ADD_USER = 4,
  EVENT_TYPE__EVENT_TYPE_REMOVE_USER = 5,
  EVENT_TYPE__EVENT_TYPE_CONVERSATION_RENAME = 6,
  EVENT_TYPE__EVENT_TYPE_HANGOUT = 7,
  EVENT_TYPE__EVENT_TYPE_PHONE_CALL = 8,
  EVENT_TYPE__EVENT_TYPE_OTR_MODIFICATION = 9,
  EVENT_TYPE__EVENT_TYPE_PLAN_MUTATION = 10,
  EVENT_TYPE__EVENT_TYPE_MMS = 11,
  EVENT_TYPE__EVENT_TYPE_DEPRECATED_12 = 12
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EVENT_TYPE)
} EventType;
typedef enum _ConversationType {
  CONVERSATION_TYPE__CONVERSATION_TYPE_UNKNOWN = 0,
  CONVERSATION_TYPE__CONVERSATION_TYPE_ONE_TO_ONE = 1,
  CONVERSATION_TYPE__CONVERSATION_TYPE_GROUP = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONVERSATION_TYPE)
} ConversationType;
typedef enum _ConversationStatus {
  CONVERSATION_STATUS__CONVERSATION_STATUS_UNKNOWN = 0,
  CONVERSATION_STATUS__CONVERSATION_STATUS_INVITED = 1,
  CONVERSATION_STATUS__CONVERSATION_STATUS_ACTIVE = 2,
  CONVERSATION_STATUS__CONVERSATION_STATUS_LEFT = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONVERSATION_STATUS)
} ConversationStatus;
typedef enum _ConversationView {
  CONVERSATION_VIEW__CONVERSATION_VIEW_UNKNOWN = 0,
  CONVERSATION_VIEW__CONVERSATION_VIEW_INBOX = 1,
  CONVERSATION_VIEW__CONVERSATION_VIEW_ARCHIVED = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONVERSATION_VIEW)
} ConversationView;
typedef enum _DeliveryMediumType {
  DELIVERY_MEDIUM_TYPE__DELIVERY_MEDIUM_UNKNOWN = 0,
  DELIVERY_MEDIUM_TYPE__DELIVERY_MEDIUM_BABEL = 1,
  DELIVERY_MEDIUM_TYPE__DELIVERY_MEDIUM_GOOGLE_VOICE = 2,
  DELIVERY_MEDIUM_TYPE__DELIVERY_MEDIUM_LOCAL_SMS = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DELIVERY_MEDIUM_TYPE)
} DeliveryMediumType;
typedef enum _ParticipantType {
  PARTICIPANT_TYPE__PARTICIPANT_TYPE_UNKNOWN = 0,
  PARTICIPANT_TYPE__PARTICIPANT_TYPE_GAIA = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PARTICIPANT_TYPE)
} ParticipantType;
typedef enum _InvitationStatus {
  INVITATION_STATUS__INVITATION_STATUS_UNKNOWN = 0,
  INVITATION_STATUS__INVITATION_STATUS_PENDING = 1,
  INVITATION_STATUS__INVITATION_STATUS_ACCEPTED = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INVITATION_STATUS)
} InvitationStatus;
typedef enum _ForceHistory {
  FORCE_HISTORY__FORCE_HISTORY_UNKNOWN = 0,
  FORCE_HISTORY__FORCE_HISTORY_NO = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FORCE_HISTORY)
} ForceHistory;
typedef enum _NetworkType {
  NETWORK_TYPE__NETWORK_TYPE_UNKNOWN = 0,
  NETWORK_TYPE__NETWORK_TYPE_BABEL = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(NETWORK_TYPE)
} NetworkType;
typedef enum _BlockState {
  BLOCK_STATE__BLOCK_STATE_UNKNOWN = 0,
  BLOCK_STATE__BLOCK_STATE_BLOCK = 1,
  BLOCK_STATE__BLOCK_STATE_UNBLOCK = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(BLOCK_STATE)
} BlockState;
typedef enum _ReplyToInviteType {
  REPLY_TO_INVITE_TYPE__REPLY_TO_INVITE_TYPE_UNKNOWN = 0,
  REPLY_TO_INVITE_TYPE__REPLY_TO_INVITE_TYPE_ACCEPT = 1,
  REPLY_TO_INVITE_TYPE__REPLY_TO_INVITE_TYPE_DECLINE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(REPLY_TO_INVITE_TYPE)
} ReplyToInviteType;
typedef enum _ClientId {
  CLIENT_ID__CLIENT_ID_UNKNOWN = 0,
  CLIENT_ID__CLIENT_ID_ANDROID = 1,
  CLIENT_ID__CLIENT_ID_IOS = 2,
  CLIENT_ID__CLIENT_ID_CHROME = 3,
  CLIENT_ID__CLIENT_ID_WEB_GPLUS = 5,
  CLIENT_ID__CLIENT_ID_WEB_GMAIL = 6,
  CLIENT_ID__CLIENT_ID_ULTRAVIOLET = 13
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLIENT_ID)
} ClientId;
typedef enum _ClientBuildType {
  CLIENT_BUILD_TYPE__BUILD_TYPE_UNKNOWN = 0,
  CLIENT_BUILD_TYPE__BUILD_TYPE_PRODUCTION_WEB = 1,
  CLIENT_BUILD_TYPE__BUILD_TYPE_PRODUCTION_APP = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLIENT_BUILD_TYPE)
} ClientBuildType;
typedef enum _ResponseStatus {
  RESPONSE_STATUS__RESPONSE_STATUS_UNKNOWN = 0,
  RESPONSE_STATUS__RESPONSE_STATUS_OK = 1,
  RESPONSE_STATUS__RESPONSE_STATUS_UNEXPECTED_ERROR = 3,
  RESPONSE_STATUS__RESPONSE_STATUS_INVALID_REQUEST = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RESPONSE_STATUS)
} ResponseStatus;
typedef enum _PhotoUrlStatus {
  PHOTO_URL_STATUS__PHOTO_URL_STATUS_UNKNOWN = 0,
  PHOTO_URL_STATUS__PHOTO_URL_STATUS_PLACEHOLDER = 1,
  PHOTO_URL_STATUS__PHOTO_URL_STATUS_USER_PHOTO = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PHOTO_URL_STATUS)
} PhotoUrlStatus;
typedef enum _Gender {
  GENDER__GENDER_UNKNOWN = 0,
  GENDER__GENDER_MALE = 1,
  GENDER__GENDER_FEMALE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GENDER)
} Gender;
typedef enum _ProfileType {
  PROFILE_TYPE__PROFILE_TYPE_NONE = 0,
  PROFILE_TYPE__PROFILE_TYPE_ES_USER = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROFILE_TYPE)
} ProfileType;
typedef enum _ConfigurationBitType {
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN = 0,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_1 = 1,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_2 = 2,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_3 = 3,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_4 = 4,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_5 = 5,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_6 = 6,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_7 = 7,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_8 = 8,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_9 = 9,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_10 = 10,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_11 = 11,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_12 = 12,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_13 = 13,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_14 = 14,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_15 = 15,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_16 = 16,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_17 = 17,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_18 = 18,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_19 = 19,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_20 = 20,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_21 = 21,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_22 = 22,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_23 = 23,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_24 = 24,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_25 = 25,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_26 = 26,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_27 = 27,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_28 = 28,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_29 = 29,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_30 = 30,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_31 = 31,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_32 = 32,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_33 = 33,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_34 = 34,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_35 = 35,
  CONFIGURATION_BIT_TYPE__CONFIGURATION_BIT_TYPE_UNKNOWN_36 = 36
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONFIGURATION_BIT_TYPE)
} ConfigurationBitType;
typedef enum _RichPresenceType {
  RICH_PRESENCE_TYPE__RICH_PRESENCE_TYPE_UNKNOWN = 0,
  RICH_PRESENCE_TYPE__RICH_PRESENCE_TYPE_IN_CALL_STATE = 1,
  RICH_PRESENCE_TYPE__RICH_PRESENCE_TYPE_UNKNOWN_3 = 3,
  RICH_PRESENCE_TYPE__RICH_PRESENCE_TYPE_UNKNOWN_4 = 4,
  RICH_PRESENCE_TYPE__RICH_PRESENCE_TYPE_UNKNOWN_5 = 5,
  RICH_PRESENCE_TYPE__RICH_PRESENCE_TYPE_DEVICE = 2,
  RICH_PRESENCE_TYPE__RICH_PRESENCE_TYPE_LAST_SEEN = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RICH_PRESENCE_TYPE)
} RichPresenceType;
typedef enum _FieldMask {
  FIELD_MASK__FIELD_MASK_REACHABLE = 1,
  FIELD_MASK__FIELD_MASK_AVAILABLE = 2,
  FIELD_MASK__FIELD_MASK_DEVICE = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FIELD_MASK)
} FieldMask;
typedef enum _DeleteType {
  DELETE_TYPE__DELETE_TYPE_UNKNOWN = 0,
  DELETE_TYPE__DELETE_TYPE_UPPER_BOUND = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DELETE_TYPE)
} DeleteType;
typedef enum _SyncFilter {
  SYNC_FILTER__SYNC_FILTER_UNKNOWN = 0,
  SYNC_FILTER__SYNC_FILTER_INBOX = 1,
  SYNC_FILTER__SYNC_FILTER_ARCHIVED = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SYNC_FILTER)
} SyncFilter;
typedef enum _SoundState {
  SOUND_STATE__SOUND_STATE_UNKNOWN = 0,
  SOUND_STATE__SOUND_STATE_ON = 1,
  SOUND_STATE__SOUND_STATE_OFF = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SOUND_STATE)
} SoundState;
typedef enum _CallerIdSettingsMask {
  CALLER_ID_SETTINGS_MASK__CALLER_ID_SETTINGS_MASK_UNKNOWN = 0,
  CALLER_ID_SETTINGS_MASK__CALLER_ID_SETTINGS_MASK_PROVIDED = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CALLER_ID_SETTINGS_MASK)
} CallerIdSettingsMask;
typedef enum _PhoneVerificationStatus {
  PHONE_VERIFICATION_STATUS__PHONE_VERIFICATION_STATUS_UNKNOWN = 0,
  PHONE_VERIFICATION_STATUS__PHONE_VERIFICATION_STATUS_VERIFIED = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PHONE_VERIFICATION_STATUS)
} PhoneVerificationStatus;
typedef enum _PhoneDiscoverabilityStatus {
  PHONE_DISCOVERABILITY_STATUS__PHONE_DISCOVERABILITY_STATUS_UNKNOWN = 0,
  PHONE_DISCOVERABILITY_STATUS__PHONE_DISCOVERABILITY_STATUS_OPTED_IN_BUT_NOT_DISCOVERABLE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PHONE_DISCOVERABILITY_STATUS)
} PhoneDiscoverabilityStatus;
typedef enum _PhoneValidationResult {
  PHONE_VALIDATION_RESULT__PHONE_VALIDATION_RESULT_IS_POSSIBLE = 0
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PHONE_VALIDATION_RESULT)
} PhoneValidationResult;

/* --- messages --- */

struct  _DoNotDisturbSetting
{
  ProtobufCMessage base;
  protobuf_c_boolean has_do_not_disturb;
  protobuf_c_boolean do_not_disturb;
  protobuf_c_boolean has_expiration_timestamp;
  uint64_t expiration_timestamp;
  protobuf_c_boolean has_version;
  uint64_t version;
};
#define DO_NOT_DISTURB_SETTING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&do_not_disturb_setting__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _NotificationSettings
{
  ProtobufCMessage base;
  DoNotDisturbSetting *dnd_settings;
};
#define NOTIFICATION_SETTINGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&notification_settings__descriptor) \
    , NULL }


struct  _ConversationId
{
  ProtobufCMessage base;
  char *id;
};
#define CONVERSATION_ID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&conversation_id__descriptor) \
    , NULL }


struct  _ParticipantId
{
  ProtobufCMessage base;
  char *gaia_id;
  char *chat_id;
};
#define PARTICIPANT_ID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&participant_id__descriptor) \
    , NULL, NULL }


struct  _DeviceStatus
{
  ProtobufCMessage base;
  protobuf_c_boolean has_mobile;
  protobuf_c_boolean mobile;
  protobuf_c_boolean has_desktop;
  protobuf_c_boolean desktop;
  protobuf_c_boolean has_tablet;
  protobuf_c_boolean tablet;
};
#define DEVICE_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_status__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _Presence
{
  ProtobufCMessage base;
  protobuf_c_boolean has_reachable;
  protobuf_c_boolean reachable;
  protobuf_c_boolean has_available;
  protobuf_c_boolean available;
  DeviceStatus *device_status;
  MoodSetting *mood_setting;
};
#define PRESENCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&presence__descriptor) \
    , 0,0, 0,0, NULL, NULL }


struct  _PresenceResult
{
  ProtobufCMessage base;
  ParticipantId *user_id;
  Presence *presence;
};
#define PRESENCE_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&presence_result__descriptor) \
    , NULL, NULL }


struct  _ClientIdentifier
{
  ProtobufCMessage base;
  char *resource;
  char *header_id;
};
#define CLIENT_IDENTIFIER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&client_identifier__descriptor) \
    , NULL, NULL }


struct  _ClientPresenceState
{
  ProtobufCMessage base;
  ClientIdentifier *identifier;
  protobuf_c_boolean has_state;
  ClientPresenceStateType state;
};
#define CLIENT_PRESENCE_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&client_presence_state__descriptor) \
    , NULL, 0,0 }


struct  _UserEventState
{
  ProtobufCMessage base;
  ParticipantId *user_id;
  char *client_generated_id;
  protobuf_c_boolean has_notification_level;
  NotificationLevel notification_level;
};
#define USER_EVENT_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&user_event_state__descriptor) \
    , NULL, NULL, 0,0 }


struct  _Formatting
{
  ProtobufCMessage base;
  protobuf_c_boolean has_bold;
  protobuf_c_boolean bold;
  protobuf_c_boolean has_italic;
  protobuf_c_boolean italic;
  protobuf_c_boolean has_strikethrough;
  protobuf_c_boolean strikethrough;
  protobuf_c_boolean has_underline;
  protobuf_c_boolean underline;
};
#define FORMATTING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&formatting__descriptor) \
    , 0,0, 0,0, 0,0, 0,0 }


struct  _LinkData
{
  ProtobufCMessage base;
  char *link_target;
};
#define LINK_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&link_data__descriptor) \
    , NULL }


struct  _Segment
{
  ProtobufCMessage base;
  SegmentType type;
  char *text;
  Formatting *formatting;
  LinkData *link_data;
};
#define SEGMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&segment__descriptor) \
    , 0, NULL, NULL, NULL }


struct  _PlusPhoto__Thumbnail
{
  ProtobufCMessage base;
  char *url;
  char *image_url;
  protobuf_c_boolean has_width_px;
  uint64_t width_px;
  protobuf_c_boolean has_height_px;
  uint64_t height_px;
};
#define PLUS_PHOTO__THUMBNAIL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&plus_photo__thumbnail__descriptor) \
    , NULL, NULL, 0,0, 0,0 }


struct  _PlusPhoto
{
  ProtobufCMessage base;
  PlusPhoto__Thumbnail *thumbnail;
  char *owner_obfuscated_id;
  char *album_id;
  char *photo_id;
  char *url;
  char *original_content_url;
  protobuf_c_boolean has_media_type;
  PlusPhoto__MediaType media_type;
  size_t n_stream_id;
  char **stream_id;
};
#define PLUS_PHOTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&plus_photo__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL, 0,0, 0,NULL }


struct  _Place__RepresentativeImage
{
  ProtobufCMessage base;
  char *url;
};
#define PLACE__REPRESENTATIVE_IMAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&place__representative_image__descriptor) \
    , NULL }


struct  _Place
{
  ProtobufCMessage base;
  char *url;
  char *name;
  Place__RepresentativeImage *representative_image;
};
#define PLACE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&place__descriptor) \
    , NULL, NULL, NULL }


struct  _EmbedItem
{
  ProtobufCMessage base;
  size_t n_type;
  ItemType *type;
  char *id;
  PlusPhoto *plus_photo;
  Place *place;
};
#define EMBED_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&embed_item__descriptor) \
    , 0,NULL, NULL, NULL, NULL }


struct  _Attachment
{
  ProtobufCMessage base;
  EmbedItem *embed_item;
};
#define ATTACHMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&attachment__descriptor) \
    , NULL }


struct  _MessageContent
{
  ProtobufCMessage base;
  size_t n_segment;
  Segment **segment;
  size_t n_attachment;
  Attachment **attachment;
};
#define MESSAGE_CONTENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&message_content__descriptor) \
    , 0,NULL, 0,NULL }


struct  _EventAnnotation
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  int32_t type;
  char *value;
};
#define EVENT_ANNOTATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_annotation__descriptor) \
    , 0,0, NULL }


struct  _ChatMessage
{
  ProtobufCMessage base;
  size_t n_annotation;
  EventAnnotation **annotation;
  MessageContent *message_content;
};
#define CHAT_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat_message__descriptor) \
    , 0,NULL, NULL }


struct  _MembershipChange
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  MembershipChangeType type;
  size_t n_participant_ids;
  ParticipantId **participant_ids;
};
#define MEMBERSHIP_CHANGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&membership_change__descriptor) \
    , 0,0, 0,NULL }


struct  _ConversationRename
{
  ProtobufCMessage base;
  char *new_name;
  char *old_name;
};
#define CONVERSATION_RENAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&conversation_rename__descriptor) \
    , NULL, NULL }


struct  _HangoutEvent
{
  ProtobufCMessage base;
  protobuf_c_boolean has_event_type;
  HangoutEventType event_type;
  size_t n_participant_id;
  ParticipantId **participant_id;
};
#define HANGOUT_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&hangout_event__descriptor) \
    , 0,0, 0,NULL }


struct  _OTRModification
{
  ProtobufCMessage base;
  protobuf_c_boolean has_old_otr_status;
  OffTheRecordStatus old_otr_status;
  protobuf_c_boolean has_new_otr_status;
  OffTheRecordStatus new_otr_status;
  protobuf_c_boolean has_old_otr_toggle;
  OffTheRecordToggle old_otr_toggle;
  protobuf_c_boolean has_new_otr_toggle;
  OffTheRecordToggle new_otr_toggle;
};
#define OTRMODIFICATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&otrmodification__descriptor) \
    , 0,0, 0,0, 0,0, 0,0 }


struct  _HashModifier
{
  ProtobufCMessage base;
  char *update_id;
  protobuf_c_boolean has_hash_diff;
  uint64_t hash_diff;
  protobuf_c_boolean has_version;
  uint64_t version;
};
#define HASH_MODIFIER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&hash_modifier__descriptor) \
    , NULL, 0,0, 0,0 }


struct  _Event
{
  ProtobufCMessage base;
  ConversationId *conversation_id;
  ParticipantId *sender_id;
  protobuf_c_boolean has_timestamp;
  uint64_t timestamp;
  UserEventState *self_event_state;
  protobuf_c_boolean has_source_type;
  SourceType source_type;
  ChatMessage *chat_message;
  MembershipChange *membership_change;
  ConversationRename *conversation_rename;
  HangoutEvent *hangout_event;
  char *event_id;
  protobuf_c_boolean has_expiration_timestamp;
  uint64_t expiration_timestamp;
  OTRModification *otr_modification;
  protobuf_c_boolean has_advances_sort_timestamp;
  protobuf_c_boolean advances_sort_timestamp;
  protobuf_c_boolean has_otr_status;
  OffTheRecordStatus otr_status;
  protobuf_c_boolean has_persisted;
  protobuf_c_boolean persisted;
  DeliveryMedium *medium_type;
  protobuf_c_boolean has_event_type;
  EventType event_type;
  protobuf_c_boolean has_event_version;
  uint64_t event_version;
  HashModifier *hash_modifier;
};
#define EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event__descriptor) \
    , NULL, NULL, 0,0, NULL, 0,0, NULL, NULL, NULL, NULL, NULL, 0,0, NULL, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, NULL }


struct  _UserReadState
{
  ProtobufCMessage base;
  ParticipantId *participant_id;
  protobuf_c_boolean has_latest_read_timestamp;
  uint64_t latest_read_timestamp;
};
#define USER_READ_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&user_read_state__descriptor) \
    , NULL, 0,0 }


struct  _DeliveryMedium
{
  ProtobufCMessage base;
  protobuf_c_boolean has_medium_type;
  DeliveryMediumType medium_type;
  Phone *phone;
};
#define DELIVERY_MEDIUM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delivery_medium__descriptor) \
    , 0,0, NULL }


struct  _DeliveryMediumOption
{
  ProtobufCMessage base;
  DeliveryMedium *delivery_medium;
  protobuf_c_boolean has_current_default;
  protobuf_c_boolean current_default;
};
#define DELIVERY_MEDIUM_OPTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delivery_medium_option__descriptor) \
    , NULL, 0,0 }


struct  _UserConversationState
{
  ProtobufCMessage base;
  char *client_generated_id;
  UserReadState *self_read_state;
  protobuf_c_boolean has_status;
  ConversationStatus status;
  protobuf_c_boolean has_notification_level;
  NotificationLevel notification_level;
  size_t n_view;
  ConversationView *view;
  ParticipantId *inviter_id;
  protobuf_c_boolean has_invite_timestamp;
  uint64_t invite_timestamp;
  protobuf_c_boolean has_sort_timestamp;
  uint64_t sort_timestamp;
  protobuf_c_boolean has_active_timestamp;
  uint64_t active_timestamp;
  size_t n_delivery_medium_option;
  DeliveryMediumOption **delivery_medium_option;
};
#define USER_CONVERSATION_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&user_conversation_state__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,NULL, NULL, 0,0, 0,0, 0,0, 0,NULL }


struct  _ConversationParticipantData
{
  ProtobufCMessage base;
  ParticipantId *id;
  char *fallback_name;
  protobuf_c_boolean has_invitation_status;
  InvitationStatus invitation_status;
  protobuf_c_boolean has_participant_type;
  ParticipantType participant_type;
  protobuf_c_boolean has_new_invitation_status;
  InvitationStatus new_invitation_status;
};
#define CONVERSATION_PARTICIPANT_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&conversation_participant_data__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0 }


struct  _Conversation
{
  ProtobufCMessage base;
  ConversationId *conversation_id;
  protobuf_c_boolean has_type;
  ConversationType type;
  char *name;
  UserConversationState *self_conversation_state;
  size_t n_read_state;
  UserReadState **read_state;
  protobuf_c_boolean has_has_active_hangout;
  protobuf_c_boolean has_active_hangout;
  protobuf_c_boolean has_otr_status;
  OffTheRecordStatus otr_status;
  protobuf_c_boolean has_otr_toggle;
  OffTheRecordToggle otr_toggle;
  protobuf_c_boolean has_conversation_history_supported;
  protobuf_c_boolean conversation_history_supported;
  size_t n_current_participant;
  ParticipantId **current_participant;
  size_t n_participant_data;
  ConversationParticipantData **participant_data;
  size_t n_network_type;
  NetworkType *network_type;
  protobuf_c_boolean has_force_history_state;
  ForceHistory force_history_state;
};
#define CONVERSATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&conversation__descriptor) \
    , NULL, 0,0, NULL, NULL, 0,NULL, 0,0, 0,0, 0,0, 0,0, 0,NULL, 0,NULL, 0,NULL, 0,0 }


struct  _EasterEgg
{
  ProtobufCMessage base;
  char *message;
};
#define EASTER_EGG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&easter_egg__descriptor) \
    , NULL }


struct  _BlockStateChange
{
  ProtobufCMessage base;
  ParticipantId *participant_id;
  protobuf_c_boolean has_new_block_state;
  BlockState new_block_state;
};
#define BLOCK_STATE_CHANGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&block_state_change__descriptor) \
    , NULL, 0,0 }


struct  _Photo
{
  ProtobufCMessage base;
  char *photo_id;
  protobuf_c_boolean has_delete_albumless_source_photo;
  protobuf_c_boolean delete_albumless_source_photo;
  char *user_id;
  protobuf_c_boolean has_is_custom_user_id;
  protobuf_c_boolean is_custom_user_id;
};
#define PHOTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&photo__descriptor) \
    , NULL, 0,0, NULL, 0,0 }


struct  _ExistingMedia
{
  ProtobufCMessage base;
  Photo *photo;
};
#define EXISTING_MEDIA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&existing_media__descriptor) \
    , NULL }


struct  _EventRequestHeader
{
  ProtobufCMessage base;
  ConversationId *conversation_id;
  protobuf_c_boolean has_client_generated_id;
  uint64_t client_generated_id;
  protobuf_c_boolean has_expected_otr;
  OffTheRecordStatus expected_otr;
  DeliveryMedium *delivery_medium;
  protobuf_c_boolean has_event_type;
  EventType event_type;
};
#define EVENT_REQUEST_HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_request_header__descriptor) \
    , NULL, 0,0, 0,0, NULL, 0,0 }


struct  _ClientVersion
{
  ProtobufCMessage base;
  protobuf_c_boolean has_client_id;
  ClientId client_id;
  protobuf_c_boolean has_build_type;
  ClientBuildType build_type;
  char *major_version;
  protobuf_c_boolean has_version_timestamp;
  uint64_t version_timestamp;
  char *device_os_version;
  char *device_hardware;
};
#define CLIENT_VERSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&client_version__descriptor) \
    , 0,0, 0,0, NULL, 0,0, NULL, NULL }


struct  _RequestHeader
{
  ProtobufCMessage base;
  ClientVersion *client_version;
  ClientIdentifier *client_identifier;
  char *language_code;
};
#define REQUEST_HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&request_header__descriptor) \
    , NULL, NULL, NULL }


struct  _ResponseHeader
{
  ProtobufCMessage base;
  protobuf_c_boolean has_status;
  ResponseStatus status;
  char *error_description;
  char *debug_url;
  char *request_trace_id;
  protobuf_c_boolean has_current_server_time;
  uint64_t current_server_time;
};
#define RESPONSE_HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&response_header__descriptor) \
    , 0,0, NULL, NULL, NULL, 0,0 }


struct  _Entity
{
  ProtobufCMessage base;
  ParticipantId *id;
  Presence *presence;
  EntityProperties *properties;
  protobuf_c_boolean has_entity_type;
  ParticipantType entity_type;
  protobuf_c_boolean has_had_past_hangout_state;
  Entity__PastHangoutState had_past_hangout_state;
};
#define ENTITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&entity__descriptor) \
    , NULL, NULL, NULL, 0,0, 0,0 }


struct  _EntityProperties
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  ProfileType type;
  char *display_name;
  char *first_name;
  char *photo_url;
  size_t n_email;
  char **email;
  size_t n_phone;
  char **phone;
  protobuf_c_boolean has_in_users_domain;
  protobuf_c_boolean in_users_domain;
  protobuf_c_boolean has_gender;
  Gender gender;
  protobuf_c_boolean has_photo_url_status;
  PhotoUrlStatus photo_url_status;
  char *canonical_email;
};
#define ENTITY_PROPERTIES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&entity_properties__descriptor) \
    , 0,0, NULL, NULL, NULL, 0,NULL, 0,NULL, 0,0, 0,0, 0,0, NULL }


struct  _ConversationState
{
  ProtobufCMessage base;
  ConversationId *conversation_id;
  Conversation *conversation;
  size_t n_event;
  Event **event;
  EventContinuationToken *event_continuation_token;
};
#define CONVERSATION_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&conversation_state__descriptor) \
    , NULL, NULL, 0,NULL, NULL }


struct  _EventContinuationToken
{
  ProtobufCMessage base;
  char *event_id;
  protobuf_c_boolean has_storage_continuation_token;
  ProtobufCBinaryData storage_continuation_token;
  protobuf_c_boolean has_event_timestamp;
  uint64_t event_timestamp;
};
#define EVENT_CONTINUATION_TOKEN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_continuation_token__descriptor) \
    , NULL, 0,{0,NULL}, 0,0 }


struct  _EntityLookupSpec
{
  ProtobufCMessage base;
  char *gaia_id;
};
#define ENTITY_LOOKUP_SPEC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&entity_lookup_spec__descriptor) \
    , NULL }


struct  _ConfigurationBit
{
  ProtobufCMessage base;
  protobuf_c_boolean has_configuration_bit_type;
  ConfigurationBitType configuration_bit_type;
  protobuf_c_boolean has_value;
  protobuf_c_boolean value;
};
#define CONFIGURATION_BIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&configuration_bit__descriptor) \
    , 0,0, 0,0 }


struct  _RichPresenceState
{
  ProtobufCMessage base;
  size_t n_get_rich_presence_enabled_state;
  RichPresenceEnabledState **get_rich_presence_enabled_state;
};
#define RICH_PRESENCE_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rich_presence_state__descriptor) \
    , 0,NULL }


struct  _RichPresenceEnabledState
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  RichPresenceType type;
  protobuf_c_boolean has_enabled;
  protobuf_c_boolean enabled;
};
#define RICH_PRESENCE_ENABLED_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rich_presence_enabled_state__descriptor) \
    , 0,0, 0,0 }


struct  _DesktopOffSetting
{
  ProtobufCMessage base;
  protobuf_c_boolean has_desktop_off;
  protobuf_c_boolean desktop_off;
};
#define DESKTOP_OFF_SETTING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&desktop_off_setting__descriptor) \
    , 0,0 }


struct  _DesktopOffState
{
  ProtobufCMessage base;
  protobuf_c_boolean has_desktop_off;
  protobuf_c_boolean desktop_off;
  protobuf_c_boolean has_version;
  uint64_t version;
};
#define DESKTOP_OFF_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&desktop_off_state__descriptor) \
    , 0,0, 0,0 }


struct  _DndSetting
{
  ProtobufCMessage base;
  protobuf_c_boolean has_do_not_disturb;
  protobuf_c_boolean do_not_disturb;
  protobuf_c_boolean has_timeout_secs;
  uint64_t timeout_secs;
};
#define DND_SETTING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dnd_setting__descriptor) \
    , 0,0, 0,0 }


struct  _PresenceStateSetting
{
  ProtobufCMessage base;
  protobuf_c_boolean has_timeout_secs;
  uint64_t timeout_secs;
  protobuf_c_boolean has_type;
  ClientPresenceStateType type;
};
#define PRESENCE_STATE_SETTING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&presence_state_setting__descriptor) \
    , 0,0, 0,0 }


struct  _MoodMessage
{
  ProtobufCMessage base;
  MoodContent *mood_content;
};
#define MOOD_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mood_message__descriptor) \
    , NULL }


struct  _MoodContent
{
  ProtobufCMessage base;
  size_t n_segment;
  Segment **segment;
};
#define MOOD_CONTENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mood_content__descriptor) \
    , 0,NULL }


struct  _MoodSetting
{
  ProtobufCMessage base;
  MoodMessage *mood_message;
};
#define MOOD_SETTING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mood_setting__descriptor) \
    , NULL }


struct  _MoodState
{
  ProtobufCMessage base;
  MoodSetting *mood_setting;
};
#define MOOD_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mood_state__descriptor) \
    , NULL }


struct  _DeleteAction
{
  ProtobufCMessage base;
  protobuf_c_boolean has_delete_action_timestamp;
  uint64_t delete_action_timestamp;
  protobuf_c_boolean has_delete_upper_bound_timestamp;
  uint64_t delete_upper_bound_timestamp;
  protobuf_c_boolean has_delete_type;
  DeleteType delete_type;
};
#define DELETE_ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_action__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _InviteeID
{
  ProtobufCMessage base;
  char *gaia_id;
  char *fallback_name;
};
#define INVITEE_ID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&invitee_id__descriptor) \
    , NULL, NULL }


struct  _Country
{
  ProtobufCMessage base;
  char *region_code;
  protobuf_c_boolean has_country_code;
  uint64_t country_code;
};
#define COUNTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&country__descriptor) \
    , NULL, 0,0 }


struct  _DesktopSoundSetting
{
  ProtobufCMessage base;
  protobuf_c_boolean has_desktop_sound_state;
  SoundState desktop_sound_state;
  protobuf_c_boolean has_desktop_ring_sound_state;
  SoundState desktop_ring_sound_state;
};
#define DESKTOP_SOUND_SETTING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&desktop_sound_setting__descriptor) \
    , 0,0, 0,0 }


struct  _PhoneData
{
  ProtobufCMessage base;
  size_t n_phone;
  Phone **phone;
  protobuf_c_boolean has_caller_id_settings_mask;
  CallerIdSettingsMask caller_id_settings_mask;
};
#define PHONE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&phone_data__descriptor) \
    , 0,NULL, 0,0 }


struct  _Phone
{
  ProtobufCMessage base;
  PhoneNumber *phone_number;
  protobuf_c_boolean has_google_voice;
  protobuf_c_boolean google_voice;
  protobuf_c_boolean has_verification_status;
  PhoneVerificationStatus verification_status;
  protobuf_c_boolean has_discoverable;
  protobuf_c_boolean discoverable;
  protobuf_c_boolean has_discoverability_status;
  PhoneDiscoverabilityStatus discoverability_status;
  protobuf_c_boolean has_primary;
  protobuf_c_boolean primary;
};
#define PHONE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&phone__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _I18nData
{
  ProtobufCMessage base;
  char *national_number;
  char *international_number;
  protobuf_c_boolean has_country_code;
  uint64_t country_code;
  char *region_code;
  protobuf_c_boolean has_is_valid;
  protobuf_c_boolean is_valid;
  protobuf_c_boolean has_validation_result;
  PhoneValidationResult validation_result;
};
#define I18N_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&i18n_data__descriptor) \
    , NULL, NULL, 0,0, NULL, 0,0, 0,0 }


struct  _PhoneNumber
{
  ProtobufCMessage base;
  char *e164;
  I18nData *i18n_data;
};
#define PHONE_NUMBER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&phone_number__descriptor) \
    , NULL, NULL }


struct  _SuggestedContactGroupHash
{
  ProtobufCMessage base;
  protobuf_c_boolean has_max_results;
  uint64_t max_results;
  protobuf_c_boolean has_hash;
  ProtobufCBinaryData hash;
};
#define SUGGESTED_CONTACT_GROUP_HASH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&suggested_contact_group_hash__descriptor) \
    , 0,0, 0,{0,NULL} }


struct  _SuggestedContact
{
  ProtobufCMessage base;
  Entity *entity;
  protobuf_c_boolean has_invitation_status;
  InvitationStatus invitation_status;
};
#define SUGGESTED_CONTACT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&suggested_contact__descriptor) \
    , NULL, 0,0 }


struct  _SuggestedContactGroup
{
  ProtobufCMessage base;
  protobuf_c_boolean has_hash_matched;
  protobuf_c_boolean hash_matched;
  protobuf_c_boolean has_hash;
  ProtobufCBinaryData hash;
  size_t n_contact;
  SuggestedContact **contact;
};
#define SUGGESTED_CONTACT_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&suggested_contact_group__descriptor) \
    , 0,0, 0,{0,NULL}, 0,NULL }


struct  _StateUpdate
{
  ProtobufCMessage base;
  StateUpdateHeader *state_update_header;
  Conversation *conversation;
  EventNotification *event_notification;
  SetFocusNotification *focus_notification;
  SetTypingNotification *typing_notification;
  SetConversationNotificationLevelNotification *notification_level_notification;
  ReplyToInviteNotification *reply_to_invite_notification;
  WatermarkNotification *watermark_notification;
  ConversationViewModification *view_modification;
  EasterEggNotification *easter_egg_notification;
  SelfPresenceNotification *self_presence_notification;
  DeleteActionNotification *delete_notification;
  PresenceNotification *presence_notification;
  BlockNotification *block_notification;
  SetNotificationSettingNotification *notification_setting_notification;
  RichPresenceEnabledStateNotification *rich_presence_enabled_state_notification;
};
#define STATE_UPDATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&state_update__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


struct  _StateUpdateHeader
{
  ProtobufCMessage base;
  protobuf_c_boolean has_active_client_state;
  ActiveClientState active_client_state;
  char *request_trace_id;
  NotificationSettings *notification_settings;
  protobuf_c_boolean has_current_server_time;
  uint64_t current_server_time;
};
#define STATE_UPDATE_HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&state_update_header__descriptor) \
    , 0,0, NULL, NULL, 0,0 }


struct  _BatchUpdate
{
  ProtobufCMessage base;
  size_t n_state_update;
  StateUpdate **state_update;
};
#define BATCH_UPDATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&batch_update__descriptor) \
    , 0,NULL }


struct  _EventNotification
{
  ProtobufCMessage base;
  Event *event;
};
#define EVENT_NOTIFICATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_notification__descriptor) \
    , NULL }


struct  _SetFocusNotification
{
  ProtobufCMessage base;
  ConversationId *conversation_id;
  ParticipantId *sender_id;
  protobuf_c_boolean has_timestamp;
  uint64_t timestamp;
  protobuf_c_boolean has_type;
  FocusType type;
  protobuf_c_boolean has_device;
  FocusDevice device;
};
#define SET_FOCUS_NOTIFICATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_focus_notification__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0 }


struct  _SetTypingNotification
{
  ProtobufCMessage base;
  ConversationId *conversation_id;
  ParticipantId *sender_id;
  protobuf_c_boolean has_timestamp;
  uint64_t timestamp;
  protobuf_c_boolean has_type;
  TypingType type;
};
#define SET_TYPING_NOTIFICATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_typing_notification__descriptor) \
    , NULL, NULL, 0,0, 0,0 }


struct  _SetConversationNotificationLevelNotification
{
  ProtobufCMessage base;
  ConversationId *conversation_id;
  protobuf_c_boolean has_level;
  NotificationLevel level;
  protobuf_c_boolean has_timestamp;
  uint64_t timestamp;
};
#define SET_CONVERSATION_NOTIFICATION_LEVEL_NOTIFICATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_conversation_notification_level_notification__descriptor) \
    , NULL, 0,0, 0,0 }


struct  _ReplyToInviteNotification
{
  ProtobufCMessage base;
  ConversationId *conversation_id;
  protobuf_c_boolean has_type;
  ReplyToInviteType type;
};
#define REPLY_TO_INVITE_NOTIFICATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reply_to_invite_notification__descriptor) \
    , NULL, 0,0 }


struct  _WatermarkNotification
{
  ProtobufCMessage base;
  ParticipantId *sender_id;
  ConversationId *conversation_id;
  protobuf_c_boolean has_latest_read_timestamp;
  uint64_t latest_read_timestamp;
};
#define WATERMARK_NOTIFICATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&watermark_notification__descriptor) \
    , NULL, NULL, 0,0 }


struct  _ConversationViewModification
{
  ProtobufCMessage base;
  ConversationId *conversation_id;
  protobuf_c_boolean has_old_view;
  ConversationView old_view;
  protobuf_c_boolean has_new_view;
  ConversationView new_view;
};
#define CONVERSATION_VIEW_MODIFICATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&conversation_view_modification__descriptor) \
    , NULL, 0,0, 0,0 }


struct  _EasterEggNotification
{
  ProtobufCMessage base;
  ParticipantId *sender_id;
  ConversationId *conversation_id;
  EasterEgg *easter_egg;
};
#define EASTER_EGG_NOTIFICATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&easter_egg_notification__descriptor) \
    , NULL, NULL, NULL }


struct  _SelfPresenceNotification
{
  ProtobufCMessage base;
  ClientPresenceState *client_presence_state;
  DoNotDisturbSetting *do_not_disturb_setting;
  DesktopOffSetting *desktop_off_setting;
  DesktopOffState *desktop_off_state;
  MoodState *mood_state;
};
#define SELF_PRESENCE_NOTIFICATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&self_presence_notification__descriptor) \
    , NULL, NULL, NULL, NULL, NULL }


struct  _DeleteActionNotification
{
  ProtobufCMessage base;
  ConversationId *conversation_id;
  DeleteAction *delete_action;
};
#define DELETE_ACTION_NOTIFICATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_action_notification__descriptor) \
    , NULL, NULL }


struct  _PresenceNotification
{
  ProtobufCMessage base;
  size_t n_presence;
  PresenceResult **presence;
};
#define PRESENCE_NOTIFICATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&presence_notification__descriptor) \
    , 0,NULL }


struct  _BlockNotification
{
  ProtobufCMessage base;
  size_t n_block_state_change;
  BlockStateChange **block_state_change;
};
#define BLOCK_NOTIFICATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&block_notification__descriptor) \
    , 0,NULL }


struct  _SetNotificationSettingNotification
{
  ProtobufCMessage base;
  DesktopSoundSetting *desktop_sound_setting;
};
#define SET_NOTIFICATION_SETTING_NOTIFICATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_notification_setting_notification__descriptor) \
    , NULL }


struct  _RichPresenceEnabledStateNotification
{
  ProtobufCMessage base;
  size_t n_rich_presence_enabled_state;
  RichPresenceEnabledState **rich_presence_enabled_state;
};
#define RICH_PRESENCE_ENABLED_STATE_NOTIFICATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rich_presence_enabled_state_notification__descriptor) \
    , 0,NULL }


struct  _ConversationSpec
{
  ProtobufCMessage base;
  ConversationId *conversation_id;
};
#define CONVERSATION_SPEC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&conversation_spec__descriptor) \
    , NULL }


struct  _AddUserRequest
{
  ProtobufCMessage base;
  RequestHeader *request_header;
  size_t n_invitee_id;
  InviteeID **invitee_id;
  EventRequestHeader *event_request_header;
};
#define ADD_USER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_user_request__descriptor) \
    , NULL, 0,NULL, NULL }


struct  _AddUserResponse
{
  ProtobufCMessage base;
  ResponseHeader *response_header;
  Event *created_event;
};
#define ADD_USER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_user_response__descriptor) \
    , NULL, NULL }


struct  _CreateConversationRequest
{
  ProtobufCMessage base;
  RequestHeader *request_header;
  protobuf_c_boolean has_type;
  ConversationType type;
  protobuf_c_boolean has_client_generated_id;
  uint64_t client_generated_id;
  char *name;
  size_t n_invitee_id;
  InviteeID **invitee_id;
};
#define CREATE_CONVERSATION_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&create_conversation_request__descriptor) \
    , NULL, 0,0, 0,0, NULL, 0,NULL }


struct  _CreateConversationResponse
{
  ProtobufCMessage base;
  ResponseHeader *response_header;
  Conversation *conversation;
  protobuf_c_boolean has_new_conversation_created;
  protobuf_c_boolean new_conversation_created;
};
#define CREATE_CONVERSATION_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&create_conversation_response__descriptor) \
    , NULL, NULL, 0,0 }


struct  _DeleteConversationRequest
{
  ProtobufCMessage base;
  RequestHeader *request_header;
  ConversationId *conversation_id;
  protobuf_c_boolean has_delete_upper_bound_timestamp;
  uint64_t delete_upper_bound_timestamp;
};
#define DELETE_CONVERSATION_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_conversation_request__descriptor) \
    , NULL, NULL, 0,0 }


struct  _DeleteConversationResponse
{
  ProtobufCMessage base;
  ResponseHeader *response_header;
  DeleteAction *delete_action;
};
#define DELETE_CONVERSATION_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_conversation_response__descriptor) \
    , NULL, NULL }


struct  _EasterEggRequest
{
  ProtobufCMessage base;
  RequestHeader *request_header;
  ConversationId *conversation_id;
  EasterEgg *easter_egg;
};
#define EASTER_EGG_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&easter_egg_request__descriptor) \
    , NULL, NULL, NULL }


struct  _EasterEggResponse
{
  ProtobufCMessage base;
  ResponseHeader *response_header;
  protobuf_c_boolean has_timestamp;
  uint64_t timestamp;
};
#define EASTER_EGG_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&easter_egg_response__descriptor) \
    , NULL, 0,0 }


struct  _GetConversationRequest
{
  ProtobufCMessage base;
  RequestHeader *request_header;
  ConversationSpec *conversation_spec;
  protobuf_c_boolean has_include_event;
  protobuf_c_boolean include_event;
  protobuf_c_boolean has_max_events_per_conversation;
  uint64_t max_events_per_conversation;
  EventContinuationToken *event_continuation_token;
};
#define GET_CONVERSATION_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_conversation_request__descriptor) \
    , NULL, NULL, 0,0, 0,0, NULL }


struct  _GetConversationResponse
{
  ProtobufCMessage base;
  ResponseHeader *response_header;
  ConversationState *conversation_state;
};
#define GET_CONVERSATION_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_conversation_response__descriptor) \
    , NULL, NULL }


struct  _GetEntityByIdRequest
{
  ProtobufCMessage base;
  RequestHeader *request_header;
  size_t n_batch_lookup_spec;
  EntityLookupSpec **batch_lookup_spec;
};
#define GET_ENTITY_BY_ID_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_entity_by_id_request__descriptor) \
    , NULL, 0,NULL }


struct  _GetEntityByIdResponse
{
  ProtobufCMessage base;
  ResponseHeader *response_header;
  size_t n_entity;
  Entity **entity;
};
#define GET_ENTITY_BY_ID_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_entity_by_id_response__descriptor) \
    , NULL, 0,NULL }


struct  _GetSuggestedEntitiesRequest
{
  ProtobufCMessage base;
  RequestHeader *request_header;
  SuggestedContactGroupHash *favorites;
  SuggestedContactGroupHash *contacts_you_hangout_with;
  SuggestedContactGroupHash *other_contacts_on_hangouts;
  SuggestedContactGroupHash *other_contacts;
  SuggestedContactGroupHash *dismissed_contacts;
  SuggestedContactGroupHash *pinned_favorites;
};
#define GET_SUGGESTED_ENTITIES_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_suggested_entities_request__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL, NULL }


struct  _GetSuggestedEntitiesResponse
{
  ProtobufCMessage base;
  ResponseHeader *response_header;
  size_t n_entity;
  Entity **entity;
  SuggestedContactGroup *favorites;
  SuggestedContactGroup *contacts_you_hangout_with;
  SuggestedContactGroup *other_contacts_on_hangouts;
  SuggestedContactGroup *other_contacts;
  SuggestedContactGroup *dismissed_contacts;
  SuggestedContactGroup *pinned_favorites;
};
#define GET_SUGGESTED_ENTITIES_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_suggested_entities_response__descriptor) \
    , NULL, 0,NULL, NULL, NULL, NULL, NULL, NULL, NULL }


struct  _GetSelfInfoRequest
{
  ProtobufCMessage base;
  RequestHeader *request_header;
};
#define GET_SELF_INFO_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_self_info_request__descriptor) \
    , NULL }


struct  _GetSelfInfoResponse
{
  ProtobufCMessage base;
  ResponseHeader *response_header;
  Entity *self_entity;
  protobuf_c_boolean has_is_known_minor;
  protobuf_c_boolean is_known_minor;
  DoNotDisturbSetting *dnd_state;
  DesktopOffSetting *desktop_off_setting;
  PhoneData *phone_data;
  size_t n_configuration_bit;
  ConfigurationBit **configuration_bit;
  DesktopOffState *desktop_off_state;
  protobuf_c_boolean has_google_plus_user;
  protobuf_c_boolean google_plus_user;
  DesktopSoundSetting *desktop_sound_setting;
  RichPresenceState *rich_presence_state;
  Country *default_country;
};
#define GET_SELF_INFO_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_self_info_response__descriptor) \
    , NULL, NULL, 0,0, NULL, NULL, NULL, 0,NULL, NULL, 0,0, NULL, NULL, NULL }


struct  _QueryPresenceRequest
{
  ProtobufCMessage base;
  RequestHeader *request_header;
  size_t n_participant_id;
  ParticipantId **participant_id;
  size_t n_field_mask;
  FieldMask *field_mask;
};
#define QUERY_PRESENCE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&query_presence_request__descriptor) \
    , NULL, 0,NULL, 0,NULL }


struct  _QueryPresenceResponse
{
  ProtobufCMessage base;
  ResponseHeader *response_header;
  size_t n_presence_result;
  PresenceResult **presence_result;
};
#define QUERY_PRESENCE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&query_presence_response__descriptor) \
    , NULL, 0,NULL }


struct  _RemoveUserRequest
{
  ProtobufCMessage base;
  RequestHeader *request_header;
  EventRequestHeader *event_request_header;
};
#define REMOVE_USER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&remove_user_request__descriptor) \
    , NULL, NULL }


struct  _RemoveUserResponse
{
  ProtobufCMessage base;
  ResponseHeader *response_header;
  Event *created_event;
};
#define REMOVE_USER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&remove_user_response__descriptor) \
    , NULL, NULL }


struct  _RenameConversationRequest
{
  ProtobufCMessage base;
  RequestHeader *request_header;
  char *new_name;
  EventRequestHeader *event_request_header;
};
#define RENAME_CONVERSATION_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rename_conversation_request__descriptor) \
    , NULL, NULL, NULL }


struct  _RenameConversationResponse
{
  ProtobufCMessage base;
  ResponseHeader *response_header;
  Event *created_event;
};
#define RENAME_CONVERSATION_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rename_conversation_response__descriptor) \
    , NULL, NULL }


struct  _SearchEntitiesRequest
{
  ProtobufCMessage base;
  RequestHeader *request_header;
  char *query;
  protobuf_c_boolean has_max_count;
  uint64_t max_count;
};
#define SEARCH_ENTITIES_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&search_entities_request__descriptor) \
    , NULL, NULL, 0,0 }


struct  _SearchEntitiesResponse
{
  ProtobufCMessage base;
  ResponseHeader *response_header;
  size_t n_entity;
  Entity **entity;
};
#define SEARCH_ENTITIES_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&search_entities_response__descriptor) \
    , NULL, 0,NULL }


struct  _SendChatMessageRequest
{
  ProtobufCMessage base;
  RequestHeader *request_header;
  size_t n_annotation;
  EventAnnotation **annotation;
  MessageContent *message_content;
  ExistingMedia *existing_media;
  EventRequestHeader *event_request_header;
};
#define SEND_CHAT_MESSAGE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&send_chat_message_request__descriptor) \
    , NULL, 0,NULL, NULL, NULL, NULL }


struct  _SendChatMessageResponse
{
  ProtobufCMessage base;
  ResponseHeader *response_header;
  Event *created_event;
};
#define SEND_CHAT_MESSAGE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&send_chat_message_response__descriptor) \
    , NULL, NULL }


struct  _SetActiveClientRequest
{
  ProtobufCMessage base;
  RequestHeader *request_header;
  protobuf_c_boolean has_is_active;
  protobuf_c_boolean is_active;
  char *full_jid;
  protobuf_c_boolean has_timeout_secs;
  uint64_t timeout_secs;
};
#define SET_ACTIVE_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_active_client_request__descriptor) \
    , NULL, 0,0, NULL, 0,0 }


struct  _SetActiveClientResponse
{
  ProtobufCMessage base;
  ResponseHeader *response_header;
};
#define SET_ACTIVE_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_active_client_response__descriptor) \
    , NULL }


struct  _SetConversationLevelRequest
{
  ProtobufCMessage base;
  RequestHeader *request_header;
};
#define SET_CONVERSATION_LEVEL_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_conversation_level_request__descriptor) \
    , NULL }


struct  _SetConversationLevelResponse
{
  ProtobufCMessage base;
  ResponseHeader *response_header;
};
#define SET_CONVERSATION_LEVEL_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_conversation_level_response__descriptor) \
    , NULL }


struct  _SetConversationNotificationLevelRequest
{
  ProtobufCMessage base;
  RequestHeader *request_header;
  ConversationId *conversation_id;
  protobuf_c_boolean has_level;
  NotificationLevel level;
};
#define SET_CONVERSATION_NOTIFICATION_LEVEL_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_conversation_notification_level_request__descriptor) \
    , NULL, NULL, 0,0 }


struct  _SetConversationNotificationLevelResponse
{
  ProtobufCMessage base;
  ResponseHeader *response_header;
  protobuf_c_boolean has_timestamp;
  uint64_t timestamp;
};
#define SET_CONVERSATION_NOTIFICATION_LEVEL_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_conversation_notification_level_response__descriptor) \
    , NULL, 0,0 }


struct  _SetFocusRequest
{
  ProtobufCMessage base;
  RequestHeader *request_header;
  ConversationId *conversation_id;
  protobuf_c_boolean has_type;
  FocusType type;
  protobuf_c_boolean has_timeout_secs;
  uint32_t timeout_secs;
};
#define SET_FOCUS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_focus_request__descriptor) \
    , NULL, NULL, 0,0, 0,0 }


struct  _SetFocusResponse
{
  ProtobufCMessage base;
  ResponseHeader *response_header;
  protobuf_c_boolean has_timestamp;
  uint64_t timestamp;
};
#define SET_FOCUS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_focus_response__descriptor) \
    , NULL, 0,0 }


struct  _SetPresenceRequest
{
  ProtobufCMessage base;
  RequestHeader *request_header;
  PresenceStateSetting *presence_state_setting;
  DndSetting *dnd_setting;
  DesktopOffSetting *desktop_off_setting;
  MoodSetting *mood_setting;
};
#define SET_PRESENCE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_presence_request__descriptor) \
    , NULL, NULL, NULL, NULL, NULL }


struct  _SetPresenceResponse
{
  ProtobufCMessage base;
  ResponseHeader *response_header;
};
#define SET_PRESENCE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_presence_response__descriptor) \
    , NULL }


struct  _SetTypingRequest
{
  ProtobufCMessage base;
  RequestHeader *request_header;
  ConversationId *conversation_id;
  protobuf_c_boolean has_type;
  TypingType type;
};
#define SET_TYPING_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_typing_request__descriptor) \
    , NULL, NULL, 0,0 }


struct  _SetTypingResponse
{
  ProtobufCMessage base;
  ResponseHeader *response_header;
  protobuf_c_boolean has_timestamp;
  uint64_t timestamp;
};
#define SET_TYPING_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_typing_response__descriptor) \
    , NULL, 0,0 }


struct  _SyncAllNewEventsRequest
{
  ProtobufCMessage base;
  RequestHeader *request_header;
  protobuf_c_boolean has_last_sync_timestamp;
  uint64_t last_sync_timestamp;
  protobuf_c_boolean has_max_response_size_bytes;
  uint64_t max_response_size_bytes;
};
#define SYNC_ALL_NEW_EVENTS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sync_all_new_events_request__descriptor) \
    , NULL, 0,0, 0,0 }


struct  _SyncAllNewEventsResponse
{
  ProtobufCMessage base;
  ResponseHeader *response_header;
  protobuf_c_boolean has_sync_timestamp;
  uint64_t sync_timestamp;
  size_t n_conversation_state;
  ConversationState **conversation_state;
};
#define SYNC_ALL_NEW_EVENTS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sync_all_new_events_response__descriptor) \
    , NULL, 0,0, 0,NULL }


struct  _SyncRecentConversationsRequest
{
  ProtobufCMessage base;
  RequestHeader *request_header;
  protobuf_c_boolean has_max_conversations;
  uint64_t max_conversations;
  protobuf_c_boolean has_max_events_per_conversation;
  uint64_t max_events_per_conversation;
  size_t n_sync_filter;
  SyncFilter *sync_filter;
};
#define SYNC_RECENT_CONVERSATIONS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sync_recent_conversations_request__descriptor) \
    , NULL, 0,0, 0,0, 0,NULL }


struct  _SyncRecentConversationsResponse
{
  ProtobufCMessage base;
  ResponseHeader *response_header;
  protobuf_c_boolean has_sync_timestamp;
  uint64_t sync_timestamp;
  size_t n_conversation_state;
  ConversationState **conversation_state;
};
#define SYNC_RECENT_CONVERSATIONS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sync_recent_conversations_response__descriptor) \
    , NULL, 0,0, 0,NULL }


struct  _UpdateWatermarkRequest
{
  ProtobufCMessage base;
  RequestHeader *request_header;
  ConversationId *conversation_id;
  protobuf_c_boolean has_last_read_timestamp;
  uint64_t last_read_timestamp;
};
#define UPDATE_WATERMARK_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_watermark_request__descriptor) \
    , NULL, NULL, 0,0 }


struct  _UpdateWatermarkResponse
{
  ProtobufCMessage base;
  ResponseHeader *response_header;
};
#define UPDATE_WATERMARK_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_watermark_response__descriptor) \
    , NULL }


/* DoNotDisturbSetting methods */
void   do_not_disturb_setting__init
                     (DoNotDisturbSetting         *message);
size_t do_not_disturb_setting__get_packed_size
                     (const DoNotDisturbSetting   *message);
size_t do_not_disturb_setting__pack
                     (const DoNotDisturbSetting   *message,
                      uint8_t             *out);
size_t do_not_disturb_setting__pack_to_buffer
                     (const DoNotDisturbSetting   *message,
                      ProtobufCBuffer     *buffer);
DoNotDisturbSetting *
       do_not_disturb_setting__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   do_not_disturb_setting__free_unpacked
                     (DoNotDisturbSetting *message,
                      ProtobufCAllocator *allocator);
/* NotificationSettings methods */
void   notification_settings__init
                     (NotificationSettings         *message);
size_t notification_settings__get_packed_size
                     (const NotificationSettings   *message);
size_t notification_settings__pack
                     (const NotificationSettings   *message,
                      uint8_t             *out);
size_t notification_settings__pack_to_buffer
                     (const NotificationSettings   *message,
                      ProtobufCBuffer     *buffer);
NotificationSettings *
       notification_settings__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   notification_settings__free_unpacked
                     (NotificationSettings *message,
                      ProtobufCAllocator *allocator);
/* ConversationId methods */
void   conversation_id__init
                     (ConversationId         *message);
size_t conversation_id__get_packed_size
                     (const ConversationId   *message);
size_t conversation_id__pack
                     (const ConversationId   *message,
                      uint8_t             *out);
size_t conversation_id__pack_to_buffer
                     (const ConversationId   *message,
                      ProtobufCBuffer     *buffer);
ConversationId *
       conversation_id__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   conversation_id__free_unpacked
                     (ConversationId *message,
                      ProtobufCAllocator *allocator);
/* ParticipantId methods */
void   participant_id__init
                     (ParticipantId         *message);
size_t participant_id__get_packed_size
                     (const ParticipantId   *message);
size_t participant_id__pack
                     (const ParticipantId   *message,
                      uint8_t             *out);
size_t participant_id__pack_to_buffer
                     (const ParticipantId   *message,
                      ProtobufCBuffer     *buffer);
ParticipantId *
       participant_id__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   participant_id__free_unpacked
                     (ParticipantId *message,
                      ProtobufCAllocator *allocator);
/* DeviceStatus methods */
void   device_status__init
                     (DeviceStatus         *message);
size_t device_status__get_packed_size
                     (const DeviceStatus   *message);
size_t device_status__pack
                     (const DeviceStatus   *message,
                      uint8_t             *out);
size_t device_status__pack_to_buffer
                     (const DeviceStatus   *message,
                      ProtobufCBuffer     *buffer);
DeviceStatus *
       device_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_status__free_unpacked
                     (DeviceStatus *message,
                      ProtobufCAllocator *allocator);
/* Presence methods */
void   presence__init
                     (Presence         *message);
size_t presence__get_packed_size
                     (const Presence   *message);
size_t presence__pack
                     (const Presence   *message,
                      uint8_t             *out);
size_t presence__pack_to_buffer
                     (const Presence   *message,
                      ProtobufCBuffer     *buffer);
Presence *
       presence__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   presence__free_unpacked
                     (Presence *message,
                      ProtobufCAllocator *allocator);
/* PresenceResult methods */
void   presence_result__init
                     (PresenceResult         *message);
size_t presence_result__get_packed_size
                     (const PresenceResult   *message);
size_t presence_result__pack
                     (const PresenceResult   *message,
                      uint8_t             *out);
size_t presence_result__pack_to_buffer
                     (const PresenceResult   *message,
                      ProtobufCBuffer     *buffer);
PresenceResult *
       presence_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   presence_result__free_unpacked
                     (PresenceResult *message,
                      ProtobufCAllocator *allocator);
/* ClientIdentifier methods */
void   client_identifier__init
                     (ClientIdentifier         *message);
size_t client_identifier__get_packed_size
                     (const ClientIdentifier   *message);
size_t client_identifier__pack
                     (const ClientIdentifier   *message,
                      uint8_t             *out);
size_t client_identifier__pack_to_buffer
                     (const ClientIdentifier   *message,
                      ProtobufCBuffer     *buffer);
ClientIdentifier *
       client_identifier__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   client_identifier__free_unpacked
                     (ClientIdentifier *message,
                      ProtobufCAllocator *allocator);
/* ClientPresenceState methods */
void   client_presence_state__init
                     (ClientPresenceState         *message);
size_t client_presence_state__get_packed_size
                     (const ClientPresenceState   *message);
size_t client_presence_state__pack
                     (const ClientPresenceState   *message,
                      uint8_t             *out);
size_t client_presence_state__pack_to_buffer
                     (const ClientPresenceState   *message,
                      ProtobufCBuffer     *buffer);
ClientPresenceState *
       client_presence_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   client_presence_state__free_unpacked
                     (ClientPresenceState *message,
                      ProtobufCAllocator *allocator);
/* UserEventState methods */
void   user_event_state__init
                     (UserEventState         *message);
size_t user_event_state__get_packed_size
                     (const UserEventState   *message);
size_t user_event_state__pack
                     (const UserEventState   *message,
                      uint8_t             *out);
size_t user_event_state__pack_to_buffer
                     (const UserEventState   *message,
                      ProtobufCBuffer     *buffer);
UserEventState *
       user_event_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   user_event_state__free_unpacked
                     (UserEventState *message,
                      ProtobufCAllocator *allocator);
/* Formatting methods */
void   formatting__init
                     (Formatting         *message);
size_t formatting__get_packed_size
                     (const Formatting   *message);
size_t formatting__pack
                     (const Formatting   *message,
                      uint8_t             *out);
size_t formatting__pack_to_buffer
                     (const Formatting   *message,
                      ProtobufCBuffer     *buffer);
Formatting *
       formatting__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   formatting__free_unpacked
                     (Formatting *message,
                      ProtobufCAllocator *allocator);
/* LinkData methods */
void   link_data__init
                     (LinkData         *message);
size_t link_data__get_packed_size
                     (const LinkData   *message);
size_t link_data__pack
                     (const LinkData   *message,
                      uint8_t             *out);
size_t link_data__pack_to_buffer
                     (const LinkData   *message,
                      ProtobufCBuffer     *buffer);
LinkData *
       link_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   link_data__free_unpacked
                     (LinkData *message,
                      ProtobufCAllocator *allocator);
/* Segment methods */
void   segment__init
                     (Segment         *message);
size_t segment__get_packed_size
                     (const Segment   *message);
size_t segment__pack
                     (const Segment   *message,
                      uint8_t             *out);
size_t segment__pack_to_buffer
                     (const Segment   *message,
                      ProtobufCBuffer     *buffer);
Segment *
       segment__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   segment__free_unpacked
                     (Segment *message,
                      ProtobufCAllocator *allocator);
/* PlusPhoto__Thumbnail methods */
void   plus_photo__thumbnail__init
                     (PlusPhoto__Thumbnail         *message);
/* PlusPhoto methods */
void   plus_photo__init
                     (PlusPhoto         *message);
size_t plus_photo__get_packed_size
                     (const PlusPhoto   *message);
size_t plus_photo__pack
                     (const PlusPhoto   *message,
                      uint8_t             *out);
size_t plus_photo__pack_to_buffer
                     (const PlusPhoto   *message,
                      ProtobufCBuffer     *buffer);
PlusPhoto *
       plus_photo__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   plus_photo__free_unpacked
                     (PlusPhoto *message,
                      ProtobufCAllocator *allocator);
/* Place__RepresentativeImage methods */
void   place__representative_image__init
                     (Place__RepresentativeImage         *message);
/* Place methods */
void   place__init
                     (Place         *message);
size_t place__get_packed_size
                     (const Place   *message);
size_t place__pack
                     (const Place   *message,
                      uint8_t             *out);
size_t place__pack_to_buffer
                     (const Place   *message,
                      ProtobufCBuffer     *buffer);
Place *
       place__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   place__free_unpacked
                     (Place *message,
                      ProtobufCAllocator *allocator);
/* EmbedItem methods */
void   embed_item__init
                     (EmbedItem         *message);
size_t embed_item__get_packed_size
                     (const EmbedItem   *message);
size_t embed_item__pack
                     (const EmbedItem   *message,
                      uint8_t             *out);
size_t embed_item__pack_to_buffer
                     (const EmbedItem   *message,
                      ProtobufCBuffer     *buffer);
EmbedItem *
       embed_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   embed_item__free_unpacked
                     (EmbedItem *message,
                      ProtobufCAllocator *allocator);
/* Attachment methods */
void   attachment__init
                     (Attachment         *message);
size_t attachment__get_packed_size
                     (const Attachment   *message);
size_t attachment__pack
                     (const Attachment   *message,
                      uint8_t             *out);
size_t attachment__pack_to_buffer
                     (const Attachment   *message,
                      ProtobufCBuffer     *buffer);
Attachment *
       attachment__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   attachment__free_unpacked
                     (Attachment *message,
                      ProtobufCAllocator *allocator);
/* MessageContent methods */
void   message_content__init
                     (MessageContent         *message);
size_t message_content__get_packed_size
                     (const MessageContent   *message);
size_t message_content__pack
                     (const MessageContent   *message,
                      uint8_t             *out);
size_t message_content__pack_to_buffer
                     (const MessageContent   *message,
                      ProtobufCBuffer     *buffer);
MessageContent *
       message_content__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   message_content__free_unpacked
                     (MessageContent *message,
                      ProtobufCAllocator *allocator);
/* EventAnnotation methods */
void   event_annotation__init
                     (EventAnnotation         *message);
size_t event_annotation__get_packed_size
                     (const EventAnnotation   *message);
size_t event_annotation__pack
                     (const EventAnnotation   *message,
                      uint8_t             *out);
size_t event_annotation__pack_to_buffer
                     (const EventAnnotation   *message,
                      ProtobufCBuffer     *buffer);
EventAnnotation *
       event_annotation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_annotation__free_unpacked
                     (EventAnnotation *message,
                      ProtobufCAllocator *allocator);
/* ChatMessage methods */
void   chat_message__init
                     (ChatMessage         *message);
size_t chat_message__get_packed_size
                     (const ChatMessage   *message);
size_t chat_message__pack
                     (const ChatMessage   *message,
                      uint8_t             *out);
size_t chat_message__pack_to_buffer
                     (const ChatMessage   *message,
                      ProtobufCBuffer     *buffer);
ChatMessage *
       chat_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat_message__free_unpacked
                     (ChatMessage *message,
                      ProtobufCAllocator *allocator);
/* MembershipChange methods */
void   membership_change__init
                     (MembershipChange         *message);
size_t membership_change__get_packed_size
                     (const MembershipChange   *message);
size_t membership_change__pack
                     (const MembershipChange   *message,
                      uint8_t             *out);
size_t membership_change__pack_to_buffer
                     (const MembershipChange   *message,
                      ProtobufCBuffer     *buffer);
MembershipChange *
       membership_change__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   membership_change__free_unpacked
                     (MembershipChange *message,
                      ProtobufCAllocator *allocator);
/* ConversationRename methods */
void   conversation_rename__init
                     (ConversationRename         *message);
size_t conversation_rename__get_packed_size
                     (const ConversationRename   *message);
size_t conversation_rename__pack
                     (const ConversationRename   *message,
                      uint8_t             *out);
size_t conversation_rename__pack_to_buffer
                     (const ConversationRename   *message,
                      ProtobufCBuffer     *buffer);
ConversationRename *
       conversation_rename__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   conversation_rename__free_unpacked
                     (ConversationRename *message,
                      ProtobufCAllocator *allocator);
/* HangoutEvent methods */
void   hangout_event__init
                     (HangoutEvent         *message);
size_t hangout_event__get_packed_size
                     (const HangoutEvent   *message);
size_t hangout_event__pack
                     (const HangoutEvent   *message,
                      uint8_t             *out);
size_t hangout_event__pack_to_buffer
                     (const HangoutEvent   *message,
                      ProtobufCBuffer     *buffer);
HangoutEvent *
       hangout_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   hangout_event__free_unpacked
                     (HangoutEvent *message,
                      ProtobufCAllocator *allocator);
/* OTRModification methods */
void   otrmodification__init
                     (OTRModification         *message);
size_t otrmodification__get_packed_size
                     (const OTRModification   *message);
size_t otrmodification__pack
                     (const OTRModification   *message,
                      uint8_t             *out);
size_t otrmodification__pack_to_buffer
                     (const OTRModification   *message,
                      ProtobufCBuffer     *buffer);
OTRModification *
       otrmodification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   otrmodification__free_unpacked
                     (OTRModification *message,
                      ProtobufCAllocator *allocator);
/* HashModifier methods */
void   hash_modifier__init
                     (HashModifier         *message);
size_t hash_modifier__get_packed_size
                     (const HashModifier   *message);
size_t hash_modifier__pack
                     (const HashModifier   *message,
                      uint8_t             *out);
size_t hash_modifier__pack_to_buffer
                     (const HashModifier   *message,
                      ProtobufCBuffer     *buffer);
HashModifier *
       hash_modifier__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   hash_modifier__free_unpacked
                     (HashModifier *message,
                      ProtobufCAllocator *allocator);
/* Event methods */
void   event__init
                     (Event         *message);
size_t event__get_packed_size
                     (const Event   *message);
size_t event__pack
                     (const Event   *message,
                      uint8_t             *out);
size_t event__pack_to_buffer
                     (const Event   *message,
                      ProtobufCBuffer     *buffer);
Event *
       event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event__free_unpacked
                     (Event *message,
                      ProtobufCAllocator *allocator);
/* UserReadState methods */
void   user_read_state__init
                     (UserReadState         *message);
size_t user_read_state__get_packed_size
                     (const UserReadState   *message);
size_t user_read_state__pack
                     (const UserReadState   *message,
                      uint8_t             *out);
size_t user_read_state__pack_to_buffer
                     (const UserReadState   *message,
                      ProtobufCBuffer     *buffer);
UserReadState *
       user_read_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   user_read_state__free_unpacked
                     (UserReadState *message,
                      ProtobufCAllocator *allocator);
/* DeliveryMedium methods */
void   delivery_medium__init
                     (DeliveryMedium         *message);
size_t delivery_medium__get_packed_size
                     (const DeliveryMedium   *message);
size_t delivery_medium__pack
                     (const DeliveryMedium   *message,
                      uint8_t             *out);
size_t delivery_medium__pack_to_buffer
                     (const DeliveryMedium   *message,
                      ProtobufCBuffer     *buffer);
DeliveryMedium *
       delivery_medium__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delivery_medium__free_unpacked
                     (DeliveryMedium *message,
                      ProtobufCAllocator *allocator);
/* DeliveryMediumOption methods */
void   delivery_medium_option__init
                     (DeliveryMediumOption         *message);
size_t delivery_medium_option__get_packed_size
                     (const DeliveryMediumOption   *message);
size_t delivery_medium_option__pack
                     (const DeliveryMediumOption   *message,
                      uint8_t             *out);
size_t delivery_medium_option__pack_to_buffer
                     (const DeliveryMediumOption   *message,
                      ProtobufCBuffer     *buffer);
DeliveryMediumOption *
       delivery_medium_option__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delivery_medium_option__free_unpacked
                     (DeliveryMediumOption *message,
                      ProtobufCAllocator *allocator);
/* UserConversationState methods */
void   user_conversation_state__init
                     (UserConversationState         *message);
size_t user_conversation_state__get_packed_size
                     (const UserConversationState   *message);
size_t user_conversation_state__pack
                     (const UserConversationState   *message,
                      uint8_t             *out);
size_t user_conversation_state__pack_to_buffer
                     (const UserConversationState   *message,
                      ProtobufCBuffer     *buffer);
UserConversationState *
       user_conversation_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   user_conversation_state__free_unpacked
                     (UserConversationState *message,
                      ProtobufCAllocator *allocator);
/* ConversationParticipantData methods */
void   conversation_participant_data__init
                     (ConversationParticipantData         *message);
size_t conversation_participant_data__get_packed_size
                     (const ConversationParticipantData   *message);
size_t conversation_participant_data__pack
                     (const ConversationParticipantData   *message,
                      uint8_t             *out);
size_t conversation_participant_data__pack_to_buffer
                     (const ConversationParticipantData   *message,
                      ProtobufCBuffer     *buffer);
ConversationParticipantData *
       conversation_participant_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   conversation_participant_data__free_unpacked
                     (ConversationParticipantData *message,
                      ProtobufCAllocator *allocator);
/* Conversation methods */
void   conversation__init
                     (Conversation         *message);
size_t conversation__get_packed_size
                     (const Conversation   *message);
size_t conversation__pack
                     (const Conversation   *message,
                      uint8_t             *out);
size_t conversation__pack_to_buffer
                     (const Conversation   *message,
                      ProtobufCBuffer     *buffer);
Conversation *
       conversation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   conversation__free_unpacked
                     (Conversation *message,
                      ProtobufCAllocator *allocator);
/* EasterEgg methods */
void   easter_egg__init
                     (EasterEgg         *message);
size_t easter_egg__get_packed_size
                     (const EasterEgg   *message);
size_t easter_egg__pack
                     (const EasterEgg   *message,
                      uint8_t             *out);
size_t easter_egg__pack_to_buffer
                     (const EasterEgg   *message,
                      ProtobufCBuffer     *buffer);
EasterEgg *
       easter_egg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   easter_egg__free_unpacked
                     (EasterEgg *message,
                      ProtobufCAllocator *allocator);
/* BlockStateChange methods */
void   block_state_change__init
                     (BlockStateChange         *message);
size_t block_state_change__get_packed_size
                     (const BlockStateChange   *message);
size_t block_state_change__pack
                     (const BlockStateChange   *message,
                      uint8_t             *out);
size_t block_state_change__pack_to_buffer
                     (const BlockStateChange   *message,
                      ProtobufCBuffer     *buffer);
BlockStateChange *
       block_state_change__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   block_state_change__free_unpacked
                     (BlockStateChange *message,
                      ProtobufCAllocator *allocator);
/* Photo methods */
void   photo__init
                     (Photo         *message);
size_t photo__get_packed_size
                     (const Photo   *message);
size_t photo__pack
                     (const Photo   *message,
                      uint8_t             *out);
size_t photo__pack_to_buffer
                     (const Photo   *message,
                      ProtobufCBuffer     *buffer);
Photo *
       photo__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   photo__free_unpacked
                     (Photo *message,
                      ProtobufCAllocator *allocator);
/* ExistingMedia methods */
void   existing_media__init
                     (ExistingMedia         *message);
size_t existing_media__get_packed_size
                     (const ExistingMedia   *message);
size_t existing_media__pack
                     (const ExistingMedia   *message,
                      uint8_t             *out);
size_t existing_media__pack_to_buffer
                     (const ExistingMedia   *message,
                      ProtobufCBuffer     *buffer);
ExistingMedia *
       existing_media__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   existing_media__free_unpacked
                     (ExistingMedia *message,
                      ProtobufCAllocator *allocator);
/* EventRequestHeader methods */
void   event_request_header__init
                     (EventRequestHeader         *message);
size_t event_request_header__get_packed_size
                     (const EventRequestHeader   *message);
size_t event_request_header__pack
                     (const EventRequestHeader   *message,
                      uint8_t             *out);
size_t event_request_header__pack_to_buffer
                     (const EventRequestHeader   *message,
                      ProtobufCBuffer     *buffer);
EventRequestHeader *
       event_request_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_request_header__free_unpacked
                     (EventRequestHeader *message,
                      ProtobufCAllocator *allocator);
/* ClientVersion methods */
void   client_version__init
                     (ClientVersion         *message);
size_t client_version__get_packed_size
                     (const ClientVersion   *message);
size_t client_version__pack
                     (const ClientVersion   *message,
                      uint8_t             *out);
size_t client_version__pack_to_buffer
                     (const ClientVersion   *message,
                      ProtobufCBuffer     *buffer);
ClientVersion *
       client_version__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   client_version__free_unpacked
                     (ClientVersion *message,
                      ProtobufCAllocator *allocator);
/* RequestHeader methods */
void   request_header__init
                     (RequestHeader         *message);
size_t request_header__get_packed_size
                     (const RequestHeader   *message);
size_t request_header__pack
                     (const RequestHeader   *message,
                      uint8_t             *out);
size_t request_header__pack_to_buffer
                     (const RequestHeader   *message,
                      ProtobufCBuffer     *buffer);
RequestHeader *
       request_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   request_header__free_unpacked
                     (RequestHeader *message,
                      ProtobufCAllocator *allocator);
/* ResponseHeader methods */
void   response_header__init
                     (ResponseHeader         *message);
size_t response_header__get_packed_size
                     (const ResponseHeader   *message);
size_t response_header__pack
                     (const ResponseHeader   *message,
                      uint8_t             *out);
size_t response_header__pack_to_buffer
                     (const ResponseHeader   *message,
                      ProtobufCBuffer     *buffer);
ResponseHeader *
       response_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   response_header__free_unpacked
                     (ResponseHeader *message,
                      ProtobufCAllocator *allocator);
/* Entity methods */
void   entity__init
                     (Entity         *message);
size_t entity__get_packed_size
                     (const Entity   *message);
size_t entity__pack
                     (const Entity   *message,
                      uint8_t             *out);
size_t entity__pack_to_buffer
                     (const Entity   *message,
                      ProtobufCBuffer     *buffer);
Entity *
       entity__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   entity__free_unpacked
                     (Entity *message,
                      ProtobufCAllocator *allocator);
/* EntityProperties methods */
void   entity_properties__init
                     (EntityProperties         *message);
size_t entity_properties__get_packed_size
                     (const EntityProperties   *message);
size_t entity_properties__pack
                     (const EntityProperties   *message,
                      uint8_t             *out);
size_t entity_properties__pack_to_buffer
                     (const EntityProperties   *message,
                      ProtobufCBuffer     *buffer);
EntityProperties *
       entity_properties__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   entity_properties__free_unpacked
                     (EntityProperties *message,
                      ProtobufCAllocator *allocator);
/* ConversationState methods */
void   conversation_state__init
                     (ConversationState         *message);
size_t conversation_state__get_packed_size
                     (const ConversationState   *message);
size_t conversation_state__pack
                     (const ConversationState   *message,
                      uint8_t             *out);
size_t conversation_state__pack_to_buffer
                     (const ConversationState   *message,
                      ProtobufCBuffer     *buffer);
ConversationState *
       conversation_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   conversation_state__free_unpacked
                     (ConversationState *message,
                      ProtobufCAllocator *allocator);
/* EventContinuationToken methods */
void   event_continuation_token__init
                     (EventContinuationToken         *message);
size_t event_continuation_token__get_packed_size
                     (const EventContinuationToken   *message);
size_t event_continuation_token__pack
                     (const EventContinuationToken   *message,
                      uint8_t             *out);
size_t event_continuation_token__pack_to_buffer
                     (const EventContinuationToken   *message,
                      ProtobufCBuffer     *buffer);
EventContinuationToken *
       event_continuation_token__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_continuation_token__free_unpacked
                     (EventContinuationToken *message,
                      ProtobufCAllocator *allocator);
/* EntityLookupSpec methods */
void   entity_lookup_spec__init
                     (EntityLookupSpec         *message);
size_t entity_lookup_spec__get_packed_size
                     (const EntityLookupSpec   *message);
size_t entity_lookup_spec__pack
                     (const EntityLookupSpec   *message,
                      uint8_t             *out);
size_t entity_lookup_spec__pack_to_buffer
                     (const EntityLookupSpec   *message,
                      ProtobufCBuffer     *buffer);
EntityLookupSpec *
       entity_lookup_spec__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   entity_lookup_spec__free_unpacked
                     (EntityLookupSpec *message,
                      ProtobufCAllocator *allocator);
/* ConfigurationBit methods */
void   configuration_bit__init
                     (ConfigurationBit         *message);
size_t configuration_bit__get_packed_size
                     (const ConfigurationBit   *message);
size_t configuration_bit__pack
                     (const ConfigurationBit   *message,
                      uint8_t             *out);
size_t configuration_bit__pack_to_buffer
                     (const ConfigurationBit   *message,
                      ProtobufCBuffer     *buffer);
ConfigurationBit *
       configuration_bit__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   configuration_bit__free_unpacked
                     (ConfigurationBit *message,
                      ProtobufCAllocator *allocator);
/* RichPresenceState methods */
void   rich_presence_state__init
                     (RichPresenceState         *message);
size_t rich_presence_state__get_packed_size
                     (const RichPresenceState   *message);
size_t rich_presence_state__pack
                     (const RichPresenceState   *message,
                      uint8_t             *out);
size_t rich_presence_state__pack_to_buffer
                     (const RichPresenceState   *message,
                      ProtobufCBuffer     *buffer);
RichPresenceState *
       rich_presence_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rich_presence_state__free_unpacked
                     (RichPresenceState *message,
                      ProtobufCAllocator *allocator);
/* RichPresenceEnabledState methods */
void   rich_presence_enabled_state__init
                     (RichPresenceEnabledState         *message);
size_t rich_presence_enabled_state__get_packed_size
                     (const RichPresenceEnabledState   *message);
size_t rich_presence_enabled_state__pack
                     (const RichPresenceEnabledState   *message,
                      uint8_t             *out);
size_t rich_presence_enabled_state__pack_to_buffer
                     (const RichPresenceEnabledState   *message,
                      ProtobufCBuffer     *buffer);
RichPresenceEnabledState *
       rich_presence_enabled_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rich_presence_enabled_state__free_unpacked
                     (RichPresenceEnabledState *message,
                      ProtobufCAllocator *allocator);
/* DesktopOffSetting methods */
void   desktop_off_setting__init
                     (DesktopOffSetting         *message);
size_t desktop_off_setting__get_packed_size
                     (const DesktopOffSetting   *message);
size_t desktop_off_setting__pack
                     (const DesktopOffSetting   *message,
                      uint8_t             *out);
size_t desktop_off_setting__pack_to_buffer
                     (const DesktopOffSetting   *message,
                      ProtobufCBuffer     *buffer);
DesktopOffSetting *
       desktop_off_setting__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   desktop_off_setting__free_unpacked
                     (DesktopOffSetting *message,
                      ProtobufCAllocator *allocator);
/* DesktopOffState methods */
void   desktop_off_state__init
                     (DesktopOffState         *message);
size_t desktop_off_state__get_packed_size
                     (const DesktopOffState   *message);
size_t desktop_off_state__pack
                     (const DesktopOffState   *message,
                      uint8_t             *out);
size_t desktop_off_state__pack_to_buffer
                     (const DesktopOffState   *message,
                      ProtobufCBuffer     *buffer);
DesktopOffState *
       desktop_off_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   desktop_off_state__free_unpacked
                     (DesktopOffState *message,
                      ProtobufCAllocator *allocator);
/* DndSetting methods */
void   dnd_setting__init
                     (DndSetting         *message);
size_t dnd_setting__get_packed_size
                     (const DndSetting   *message);
size_t dnd_setting__pack
                     (const DndSetting   *message,
                      uint8_t             *out);
size_t dnd_setting__pack_to_buffer
                     (const DndSetting   *message,
                      ProtobufCBuffer     *buffer);
DndSetting *
       dnd_setting__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dnd_setting__free_unpacked
                     (DndSetting *message,
                      ProtobufCAllocator *allocator);
/* PresenceStateSetting methods */
void   presence_state_setting__init
                     (PresenceStateSetting         *message);
size_t presence_state_setting__get_packed_size
                     (const PresenceStateSetting   *message);
size_t presence_state_setting__pack
                     (const PresenceStateSetting   *message,
                      uint8_t             *out);
size_t presence_state_setting__pack_to_buffer
                     (const PresenceStateSetting   *message,
                      ProtobufCBuffer     *buffer);
PresenceStateSetting *
       presence_state_setting__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   presence_state_setting__free_unpacked
                     (PresenceStateSetting *message,
                      ProtobufCAllocator *allocator);
/* MoodMessage methods */
void   mood_message__init
                     (MoodMessage         *message);
size_t mood_message__get_packed_size
                     (const MoodMessage   *message);
size_t mood_message__pack
                     (const MoodMessage   *message,
                      uint8_t             *out);
size_t mood_message__pack_to_buffer
                     (const MoodMessage   *message,
                      ProtobufCBuffer     *buffer);
MoodMessage *
       mood_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mood_message__free_unpacked
                     (MoodMessage *message,
                      ProtobufCAllocator *allocator);
/* MoodContent methods */
void   mood_content__init
                     (MoodContent         *message);
size_t mood_content__get_packed_size
                     (const MoodContent   *message);
size_t mood_content__pack
                     (const MoodContent   *message,
                      uint8_t             *out);
size_t mood_content__pack_to_buffer
                     (const MoodContent   *message,
                      ProtobufCBuffer     *buffer);
MoodContent *
       mood_content__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mood_content__free_unpacked
                     (MoodContent *message,
                      ProtobufCAllocator *allocator);
/* MoodSetting methods */
void   mood_setting__init
                     (MoodSetting         *message);
size_t mood_setting__get_packed_size
                     (const MoodSetting   *message);
size_t mood_setting__pack
                     (const MoodSetting   *message,
                      uint8_t             *out);
size_t mood_setting__pack_to_buffer
                     (const MoodSetting   *message,
                      ProtobufCBuffer     *buffer);
MoodSetting *
       mood_setting__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mood_setting__free_unpacked
                     (MoodSetting *message,
                      ProtobufCAllocator *allocator);
/* MoodState methods */
void   mood_state__init
                     (MoodState         *message);
size_t mood_state__get_packed_size
                     (const MoodState   *message);
size_t mood_state__pack
                     (const MoodState   *message,
                      uint8_t             *out);
size_t mood_state__pack_to_buffer
                     (const MoodState   *message,
                      ProtobufCBuffer     *buffer);
MoodState *
       mood_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mood_state__free_unpacked
                     (MoodState *message,
                      ProtobufCAllocator *allocator);
/* DeleteAction methods */
void   delete_action__init
                     (DeleteAction         *message);
size_t delete_action__get_packed_size
                     (const DeleteAction   *message);
size_t delete_action__pack
                     (const DeleteAction   *message,
                      uint8_t             *out);
size_t delete_action__pack_to_buffer
                     (const DeleteAction   *message,
                      ProtobufCBuffer     *buffer);
DeleteAction *
       delete_action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_action__free_unpacked
                     (DeleteAction *message,
                      ProtobufCAllocator *allocator);
/* InviteeID methods */
void   invitee_id__init
                     (InviteeID         *message);
size_t invitee_id__get_packed_size
                     (const InviteeID   *message);
size_t invitee_id__pack
                     (const InviteeID   *message,
                      uint8_t             *out);
size_t invitee_id__pack_to_buffer
                     (const InviteeID   *message,
                      ProtobufCBuffer     *buffer);
InviteeID *
       invitee_id__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   invitee_id__free_unpacked
                     (InviteeID *message,
                      ProtobufCAllocator *allocator);
/* Country methods */
void   country__init
                     (Country         *message);
size_t country__get_packed_size
                     (const Country   *message);
size_t country__pack
                     (const Country   *message,
                      uint8_t             *out);
size_t country__pack_to_buffer
                     (const Country   *message,
                      ProtobufCBuffer     *buffer);
Country *
       country__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   country__free_unpacked
                     (Country *message,
                      ProtobufCAllocator *allocator);
/* DesktopSoundSetting methods */
void   desktop_sound_setting__init
                     (DesktopSoundSetting         *message);
size_t desktop_sound_setting__get_packed_size
                     (const DesktopSoundSetting   *message);
size_t desktop_sound_setting__pack
                     (const DesktopSoundSetting   *message,
                      uint8_t             *out);
size_t desktop_sound_setting__pack_to_buffer
                     (const DesktopSoundSetting   *message,
                      ProtobufCBuffer     *buffer);
DesktopSoundSetting *
       desktop_sound_setting__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   desktop_sound_setting__free_unpacked
                     (DesktopSoundSetting *message,
                      ProtobufCAllocator *allocator);
/* PhoneData methods */
void   phone_data__init
                     (PhoneData         *message);
size_t phone_data__get_packed_size
                     (const PhoneData   *message);
size_t phone_data__pack
                     (const PhoneData   *message,
                      uint8_t             *out);
size_t phone_data__pack_to_buffer
                     (const PhoneData   *message,
                      ProtobufCBuffer     *buffer);
PhoneData *
       phone_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   phone_data__free_unpacked
                     (PhoneData *message,
                      ProtobufCAllocator *allocator);
/* Phone methods */
void   phone__init
                     (Phone         *message);
size_t phone__get_packed_size
                     (const Phone   *message);
size_t phone__pack
                     (const Phone   *message,
                      uint8_t             *out);
size_t phone__pack_to_buffer
                     (const Phone   *message,
                      ProtobufCBuffer     *buffer);
Phone *
       phone__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   phone__free_unpacked
                     (Phone *message,
                      ProtobufCAllocator *allocator);
/* I18nData methods */
void   i18n_data__init
                     (I18nData         *message);
size_t i18n_data__get_packed_size
                     (const I18nData   *message);
size_t i18n_data__pack
                     (const I18nData   *message,
                      uint8_t             *out);
size_t i18n_data__pack_to_buffer
                     (const I18nData   *message,
                      ProtobufCBuffer     *buffer);
I18nData *
       i18n_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   i18n_data__free_unpacked
                     (I18nData *message,
                      ProtobufCAllocator *allocator);
/* PhoneNumber methods */
void   phone_number__init
                     (PhoneNumber         *message);
size_t phone_number__get_packed_size
                     (const PhoneNumber   *message);
size_t phone_number__pack
                     (const PhoneNumber   *message,
                      uint8_t             *out);
size_t phone_number__pack_to_buffer
                     (const PhoneNumber   *message,
                      ProtobufCBuffer     *buffer);
PhoneNumber *
       phone_number__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   phone_number__free_unpacked
                     (PhoneNumber *message,
                      ProtobufCAllocator *allocator);
/* SuggestedContactGroupHash methods */
void   suggested_contact_group_hash__init
                     (SuggestedContactGroupHash         *message);
size_t suggested_contact_group_hash__get_packed_size
                     (const SuggestedContactGroupHash   *message);
size_t suggested_contact_group_hash__pack
                     (const SuggestedContactGroupHash   *message,
                      uint8_t             *out);
size_t suggested_contact_group_hash__pack_to_buffer
                     (const SuggestedContactGroupHash   *message,
                      ProtobufCBuffer     *buffer);
SuggestedContactGroupHash *
       suggested_contact_group_hash__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   suggested_contact_group_hash__free_unpacked
                     (SuggestedContactGroupHash *message,
                      ProtobufCAllocator *allocator);
/* SuggestedContact methods */
void   suggested_contact__init
                     (SuggestedContact         *message);
size_t suggested_contact__get_packed_size
                     (const SuggestedContact   *message);
size_t suggested_contact__pack
                     (const SuggestedContact   *message,
                      uint8_t             *out);
size_t suggested_contact__pack_to_buffer
                     (const SuggestedContact   *message,
                      ProtobufCBuffer     *buffer);
SuggestedContact *
       suggested_contact__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   suggested_contact__free_unpacked
                     (SuggestedContact *message,
                      ProtobufCAllocator *allocator);
/* SuggestedContactGroup methods */
void   suggested_contact_group__init
                     (SuggestedContactGroup         *message);
size_t suggested_contact_group__get_packed_size
                     (const SuggestedContactGroup   *message);
size_t suggested_contact_group__pack
                     (const SuggestedContactGroup   *message,
                      uint8_t             *out);
size_t suggested_contact_group__pack_to_buffer
                     (const SuggestedContactGroup   *message,
                      ProtobufCBuffer     *buffer);
SuggestedContactGroup *
       suggested_contact_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   suggested_contact_group__free_unpacked
                     (SuggestedContactGroup *message,
                      ProtobufCAllocator *allocator);
/* StateUpdate methods */
void   state_update__init
                     (StateUpdate         *message);
size_t state_update__get_packed_size
                     (const StateUpdate   *message);
size_t state_update__pack
                     (const StateUpdate   *message,
                      uint8_t             *out);
size_t state_update__pack_to_buffer
                     (const StateUpdate   *message,
                      ProtobufCBuffer     *buffer);
StateUpdate *
       state_update__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   state_update__free_unpacked
                     (StateUpdate *message,
                      ProtobufCAllocator *allocator);
/* StateUpdateHeader methods */
void   state_update_header__init
                     (StateUpdateHeader         *message);
size_t state_update_header__get_packed_size
                     (const StateUpdateHeader   *message);
size_t state_update_header__pack
                     (const StateUpdateHeader   *message,
                      uint8_t             *out);
size_t state_update_header__pack_to_buffer
                     (const StateUpdateHeader   *message,
                      ProtobufCBuffer     *buffer);
StateUpdateHeader *
       state_update_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   state_update_header__free_unpacked
                     (StateUpdateHeader *message,
                      ProtobufCAllocator *allocator);
/* BatchUpdate methods */
void   batch_update__init
                     (BatchUpdate         *message);
size_t batch_update__get_packed_size
                     (const BatchUpdate   *message);
size_t batch_update__pack
                     (const BatchUpdate   *message,
                      uint8_t             *out);
size_t batch_update__pack_to_buffer
                     (const BatchUpdate   *message,
                      ProtobufCBuffer     *buffer);
BatchUpdate *
       batch_update__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   batch_update__free_unpacked
                     (BatchUpdate *message,
                      ProtobufCAllocator *allocator);
/* EventNotification methods */
void   event_notification__init
                     (EventNotification         *message);
size_t event_notification__get_packed_size
                     (const EventNotification   *message);
size_t event_notification__pack
                     (const EventNotification   *message,
                      uint8_t             *out);
size_t event_notification__pack_to_buffer
                     (const EventNotification   *message,
                      ProtobufCBuffer     *buffer);
EventNotification *
       event_notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_notification__free_unpacked
                     (EventNotification *message,
                      ProtobufCAllocator *allocator);
/* SetFocusNotification methods */
void   set_focus_notification__init
                     (SetFocusNotification         *message);
size_t set_focus_notification__get_packed_size
                     (const SetFocusNotification   *message);
size_t set_focus_notification__pack
                     (const SetFocusNotification   *message,
                      uint8_t             *out);
size_t set_focus_notification__pack_to_buffer
                     (const SetFocusNotification   *message,
                      ProtobufCBuffer     *buffer);
SetFocusNotification *
       set_focus_notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_focus_notification__free_unpacked
                     (SetFocusNotification *message,
                      ProtobufCAllocator *allocator);
/* SetTypingNotification methods */
void   set_typing_notification__init
                     (SetTypingNotification         *message);
size_t set_typing_notification__get_packed_size
                     (const SetTypingNotification   *message);
size_t set_typing_notification__pack
                     (const SetTypingNotification   *message,
                      uint8_t             *out);
size_t set_typing_notification__pack_to_buffer
                     (const SetTypingNotification   *message,
                      ProtobufCBuffer     *buffer);
SetTypingNotification *
       set_typing_notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_typing_notification__free_unpacked
                     (SetTypingNotification *message,
                      ProtobufCAllocator *allocator);
/* SetConversationNotificationLevelNotification methods */
void   set_conversation_notification_level_notification__init
                     (SetConversationNotificationLevelNotification         *message);
size_t set_conversation_notification_level_notification__get_packed_size
                     (const SetConversationNotificationLevelNotification   *message);
size_t set_conversation_notification_level_notification__pack
                     (const SetConversationNotificationLevelNotification   *message,
                      uint8_t             *out);
size_t set_conversation_notification_level_notification__pack_to_buffer
                     (const SetConversationNotificationLevelNotification   *message,
                      ProtobufCBuffer     *buffer);
SetConversationNotificationLevelNotification *
       set_conversation_notification_level_notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_conversation_notification_level_notification__free_unpacked
                     (SetConversationNotificationLevelNotification *message,
                      ProtobufCAllocator *allocator);
/* ReplyToInviteNotification methods */
void   reply_to_invite_notification__init
                     (ReplyToInviteNotification         *message);
size_t reply_to_invite_notification__get_packed_size
                     (const ReplyToInviteNotification   *message);
size_t reply_to_invite_notification__pack
                     (const ReplyToInviteNotification   *message,
                      uint8_t             *out);
size_t reply_to_invite_notification__pack_to_buffer
                     (const ReplyToInviteNotification   *message,
                      ProtobufCBuffer     *buffer);
ReplyToInviteNotification *
       reply_to_invite_notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reply_to_invite_notification__free_unpacked
                     (ReplyToInviteNotification *message,
                      ProtobufCAllocator *allocator);
/* WatermarkNotification methods */
void   watermark_notification__init
                     (WatermarkNotification         *message);
size_t watermark_notification__get_packed_size
                     (const WatermarkNotification   *message);
size_t watermark_notification__pack
                     (const WatermarkNotification   *message,
                      uint8_t             *out);
size_t watermark_notification__pack_to_buffer
                     (const WatermarkNotification   *message,
                      ProtobufCBuffer     *buffer);
WatermarkNotification *
       watermark_notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   watermark_notification__free_unpacked
                     (WatermarkNotification *message,
                      ProtobufCAllocator *allocator);
/* ConversationViewModification methods */
void   conversation_view_modification__init
                     (ConversationViewModification         *message);
size_t conversation_view_modification__get_packed_size
                     (const ConversationViewModification   *message);
size_t conversation_view_modification__pack
                     (const ConversationViewModification   *message,
                      uint8_t             *out);
size_t conversation_view_modification__pack_to_buffer
                     (const ConversationViewModification   *message,
                      ProtobufCBuffer     *buffer);
ConversationViewModification *
       conversation_view_modification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   conversation_view_modification__free_unpacked
                     (ConversationViewModification *message,
                      ProtobufCAllocator *allocator);
/* EasterEggNotification methods */
void   easter_egg_notification__init
                     (EasterEggNotification         *message);
size_t easter_egg_notification__get_packed_size
                     (const EasterEggNotification   *message);
size_t easter_egg_notification__pack
                     (const EasterEggNotification   *message,
                      uint8_t             *out);
size_t easter_egg_notification__pack_to_buffer
                     (const EasterEggNotification   *message,
                      ProtobufCBuffer     *buffer);
EasterEggNotification *
       easter_egg_notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   easter_egg_notification__free_unpacked
                     (EasterEggNotification *message,
                      ProtobufCAllocator *allocator);
/* SelfPresenceNotification methods */
void   self_presence_notification__init
                     (SelfPresenceNotification         *message);
size_t self_presence_notification__get_packed_size
                     (const SelfPresenceNotification   *message);
size_t self_presence_notification__pack
                     (const SelfPresenceNotification   *message,
                      uint8_t             *out);
size_t self_presence_notification__pack_to_buffer
                     (const SelfPresenceNotification   *message,
                      ProtobufCBuffer     *buffer);
SelfPresenceNotification *
       self_presence_notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   self_presence_notification__free_unpacked
                     (SelfPresenceNotification *message,
                      ProtobufCAllocator *allocator);
/* DeleteActionNotification methods */
void   delete_action_notification__init
                     (DeleteActionNotification         *message);
size_t delete_action_notification__get_packed_size
                     (const DeleteActionNotification   *message);
size_t delete_action_notification__pack
                     (const DeleteActionNotification   *message,
                      uint8_t             *out);
size_t delete_action_notification__pack_to_buffer
                     (const DeleteActionNotification   *message,
                      ProtobufCBuffer     *buffer);
DeleteActionNotification *
       delete_action_notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_action_notification__free_unpacked
                     (DeleteActionNotification *message,
                      ProtobufCAllocator *allocator);
/* PresenceNotification methods */
void   presence_notification__init
                     (PresenceNotification         *message);
size_t presence_notification__get_packed_size
                     (const PresenceNotification   *message);
size_t presence_notification__pack
                     (const PresenceNotification   *message,
                      uint8_t             *out);
size_t presence_notification__pack_to_buffer
                     (const PresenceNotification   *message,
                      ProtobufCBuffer     *buffer);
PresenceNotification *
       presence_notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   presence_notification__free_unpacked
                     (PresenceNotification *message,
                      ProtobufCAllocator *allocator);
/* BlockNotification methods */
void   block_notification__init
                     (BlockNotification         *message);
size_t block_notification__get_packed_size
                     (const BlockNotification   *message);
size_t block_notification__pack
                     (const BlockNotification   *message,
                      uint8_t             *out);
size_t block_notification__pack_to_buffer
                     (const BlockNotification   *message,
                      ProtobufCBuffer     *buffer);
BlockNotification *
       block_notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   block_notification__free_unpacked
                     (BlockNotification *message,
                      ProtobufCAllocator *allocator);
/* SetNotificationSettingNotification methods */
void   set_notification_setting_notification__init
                     (SetNotificationSettingNotification         *message);
size_t set_notification_setting_notification__get_packed_size
                     (const SetNotificationSettingNotification   *message);
size_t set_notification_setting_notification__pack
                     (const SetNotificationSettingNotification   *message,
                      uint8_t             *out);
size_t set_notification_setting_notification__pack_to_buffer
                     (const SetNotificationSettingNotification   *message,
                      ProtobufCBuffer     *buffer);
SetNotificationSettingNotification *
       set_notification_setting_notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_notification_setting_notification__free_unpacked
                     (SetNotificationSettingNotification *message,
                      ProtobufCAllocator *allocator);
/* RichPresenceEnabledStateNotification methods */
void   rich_presence_enabled_state_notification__init
                     (RichPresenceEnabledStateNotification         *message);
size_t rich_presence_enabled_state_notification__get_packed_size
                     (const RichPresenceEnabledStateNotification   *message);
size_t rich_presence_enabled_state_notification__pack
                     (const RichPresenceEnabledStateNotification   *message,
                      uint8_t             *out);
size_t rich_presence_enabled_state_notification__pack_to_buffer
                     (const RichPresenceEnabledStateNotification   *message,
                      ProtobufCBuffer     *buffer);
RichPresenceEnabledStateNotification *
       rich_presence_enabled_state_notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rich_presence_enabled_state_notification__free_unpacked
                     (RichPresenceEnabledStateNotification *message,
                      ProtobufCAllocator *allocator);
/* ConversationSpec methods */
void   conversation_spec__init
                     (ConversationSpec         *message);
size_t conversation_spec__get_packed_size
                     (const ConversationSpec   *message);
size_t conversation_spec__pack
                     (const ConversationSpec   *message,
                      uint8_t             *out);
size_t conversation_spec__pack_to_buffer
                     (const ConversationSpec   *message,
                      ProtobufCBuffer     *buffer);
ConversationSpec *
       conversation_spec__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   conversation_spec__free_unpacked
                     (ConversationSpec *message,
                      ProtobufCAllocator *allocator);
/* AddUserRequest methods */
void   add_user_request__init
                     (AddUserRequest         *message);
size_t add_user_request__get_packed_size
                     (const AddUserRequest   *message);
size_t add_user_request__pack
                     (const AddUserRequest   *message,
                      uint8_t             *out);
size_t add_user_request__pack_to_buffer
                     (const AddUserRequest   *message,
                      ProtobufCBuffer     *buffer);
AddUserRequest *
       add_user_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_user_request__free_unpacked
                     (AddUserRequest *message,
                      ProtobufCAllocator *allocator);
/* AddUserResponse methods */
void   add_user_response__init
                     (AddUserResponse         *message);
size_t add_user_response__get_packed_size
                     (const AddUserResponse   *message);
size_t add_user_response__pack
                     (const AddUserResponse   *message,
                      uint8_t             *out);
size_t add_user_response__pack_to_buffer
                     (const AddUserResponse   *message,
                      ProtobufCBuffer     *buffer);
AddUserResponse *
       add_user_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_user_response__free_unpacked
                     (AddUserResponse *message,
                      ProtobufCAllocator *allocator);
/* CreateConversationRequest methods */
void   create_conversation_request__init
                     (CreateConversationRequest         *message);
size_t create_conversation_request__get_packed_size
                     (const CreateConversationRequest   *message);
size_t create_conversation_request__pack
                     (const CreateConversationRequest   *message,
                      uint8_t             *out);
size_t create_conversation_request__pack_to_buffer
                     (const CreateConversationRequest   *message,
                      ProtobufCBuffer     *buffer);
CreateConversationRequest *
       create_conversation_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   create_conversation_request__free_unpacked
                     (CreateConversationRequest *message,
                      ProtobufCAllocator *allocator);
/* CreateConversationResponse methods */
void   create_conversation_response__init
                     (CreateConversationResponse         *message);
size_t create_conversation_response__get_packed_size
                     (const CreateConversationResponse   *message);
size_t create_conversation_response__pack
                     (const CreateConversationResponse   *message,
                      uint8_t             *out);
size_t create_conversation_response__pack_to_buffer
                     (const CreateConversationResponse   *message,
                      ProtobufCBuffer     *buffer);
CreateConversationResponse *
       create_conversation_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   create_conversation_response__free_unpacked
                     (CreateConversationResponse *message,
                      ProtobufCAllocator *allocator);
/* DeleteConversationRequest methods */
void   delete_conversation_request__init
                     (DeleteConversationRequest         *message);
size_t delete_conversation_request__get_packed_size
                     (const DeleteConversationRequest   *message);
size_t delete_conversation_request__pack
                     (const DeleteConversationRequest   *message,
                      uint8_t             *out);
size_t delete_conversation_request__pack_to_buffer
                     (const DeleteConversationRequest   *message,
                      ProtobufCBuffer     *buffer);
DeleteConversationRequest *
       delete_conversation_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_conversation_request__free_unpacked
                     (DeleteConversationRequest *message,
                      ProtobufCAllocator *allocator);
/* DeleteConversationResponse methods */
void   delete_conversation_response__init
                     (DeleteConversationResponse         *message);
size_t delete_conversation_response__get_packed_size
                     (const DeleteConversationResponse   *message);
size_t delete_conversation_response__pack
                     (const DeleteConversationResponse   *message,
                      uint8_t             *out);
size_t delete_conversation_response__pack_to_buffer
                     (const DeleteConversationResponse   *message,
                      ProtobufCBuffer     *buffer);
DeleteConversationResponse *
       delete_conversation_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_conversation_response__free_unpacked
                     (DeleteConversationResponse *message,
                      ProtobufCAllocator *allocator);
/* EasterEggRequest methods */
void   easter_egg_request__init
                     (EasterEggRequest         *message);
size_t easter_egg_request__get_packed_size
                     (const EasterEggRequest   *message);
size_t easter_egg_request__pack
                     (const EasterEggRequest   *message,
                      uint8_t             *out);
size_t easter_egg_request__pack_to_buffer
                     (const EasterEggRequest   *message,
                      ProtobufCBuffer     *buffer);
EasterEggRequest *
       easter_egg_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   easter_egg_request__free_unpacked
                     (EasterEggRequest *message,
                      ProtobufCAllocator *allocator);
/* EasterEggResponse methods */
void   easter_egg_response__init
                     (EasterEggResponse         *message);
size_t easter_egg_response__get_packed_size
                     (const EasterEggResponse   *message);
size_t easter_egg_response__pack
                     (const EasterEggResponse   *message,
                      uint8_t             *out);
size_t easter_egg_response__pack_to_buffer
                     (const EasterEggResponse   *message,
                      ProtobufCBuffer     *buffer);
EasterEggResponse *
       easter_egg_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   easter_egg_response__free_unpacked
                     (EasterEggResponse *message,
                      ProtobufCAllocator *allocator);
/* GetConversationRequest methods */
void   get_conversation_request__init
                     (GetConversationRequest         *message);
size_t get_conversation_request__get_packed_size
                     (const GetConversationRequest   *message);
size_t get_conversation_request__pack
                     (const GetConversationRequest   *message,
                      uint8_t             *out);
size_t get_conversation_request__pack_to_buffer
                     (const GetConversationRequest   *message,
                      ProtobufCBuffer     *buffer);
GetConversationRequest *
       get_conversation_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_conversation_request__free_unpacked
                     (GetConversationRequest *message,
                      ProtobufCAllocator *allocator);
/* GetConversationResponse methods */
void   get_conversation_response__init
                     (GetConversationResponse         *message);
size_t get_conversation_response__get_packed_size
                     (const GetConversationResponse   *message);
size_t get_conversation_response__pack
                     (const GetConversationResponse   *message,
                      uint8_t             *out);
size_t get_conversation_response__pack_to_buffer
                     (const GetConversationResponse   *message,
                      ProtobufCBuffer     *buffer);
GetConversationResponse *
       get_conversation_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_conversation_response__free_unpacked
                     (GetConversationResponse *message,
                      ProtobufCAllocator *allocator);
/* GetEntityByIdRequest methods */
void   get_entity_by_id_request__init
                     (GetEntityByIdRequest         *message);
size_t get_entity_by_id_request__get_packed_size
                     (const GetEntityByIdRequest   *message);
size_t get_entity_by_id_request__pack
                     (const GetEntityByIdRequest   *message,
                      uint8_t             *out);
size_t get_entity_by_id_request__pack_to_buffer
                     (const GetEntityByIdRequest   *message,
                      ProtobufCBuffer     *buffer);
GetEntityByIdRequest *
       get_entity_by_id_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_entity_by_id_request__free_unpacked
                     (GetEntityByIdRequest *message,
                      ProtobufCAllocator *allocator);
/* GetEntityByIdResponse methods */
void   get_entity_by_id_response__init
                     (GetEntityByIdResponse         *message);
size_t get_entity_by_id_response__get_packed_size
                     (const GetEntityByIdResponse   *message);
size_t get_entity_by_id_response__pack
                     (const GetEntityByIdResponse   *message,
                      uint8_t             *out);
size_t get_entity_by_id_response__pack_to_buffer
                     (const GetEntityByIdResponse   *message,
                      ProtobufCBuffer     *buffer);
GetEntityByIdResponse *
       get_entity_by_id_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_entity_by_id_response__free_unpacked
                     (GetEntityByIdResponse *message,
                      ProtobufCAllocator *allocator);
/* GetSuggestedEntitiesRequest methods */
void   get_suggested_entities_request__init
                     (GetSuggestedEntitiesRequest         *message);
size_t get_suggested_entities_request__get_packed_size
                     (const GetSuggestedEntitiesRequest   *message);
size_t get_suggested_entities_request__pack
                     (const GetSuggestedEntitiesRequest   *message,
                      uint8_t             *out);
size_t get_suggested_entities_request__pack_to_buffer
                     (const GetSuggestedEntitiesRequest   *message,
                      ProtobufCBuffer     *buffer);
GetSuggestedEntitiesRequest *
       get_suggested_entities_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_suggested_entities_request__free_unpacked
                     (GetSuggestedEntitiesRequest *message,
                      ProtobufCAllocator *allocator);
/* GetSuggestedEntitiesResponse methods */
void   get_suggested_entities_response__init
                     (GetSuggestedEntitiesResponse         *message);
size_t get_suggested_entities_response__get_packed_size
                     (const GetSuggestedEntitiesResponse   *message);
size_t get_suggested_entities_response__pack
                     (const GetSuggestedEntitiesResponse   *message,
                      uint8_t             *out);
size_t get_suggested_entities_response__pack_to_buffer
                     (const GetSuggestedEntitiesResponse   *message,
                      ProtobufCBuffer     *buffer);
GetSuggestedEntitiesResponse *
       get_suggested_entities_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_suggested_entities_response__free_unpacked
                     (GetSuggestedEntitiesResponse *message,
                      ProtobufCAllocator *allocator);
/* GetSelfInfoRequest methods */
void   get_self_info_request__init
                     (GetSelfInfoRequest         *message);
size_t get_self_info_request__get_packed_size
                     (const GetSelfInfoRequest   *message);
size_t get_self_info_request__pack
                     (const GetSelfInfoRequest   *message,
                      uint8_t             *out);
size_t get_self_info_request__pack_to_buffer
                     (const GetSelfInfoRequest   *message,
                      ProtobufCBuffer     *buffer);
GetSelfInfoRequest *
       get_self_info_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_self_info_request__free_unpacked
                     (GetSelfInfoRequest *message,
                      ProtobufCAllocator *allocator);
/* GetSelfInfoResponse methods */
void   get_self_info_response__init
                     (GetSelfInfoResponse         *message);
size_t get_self_info_response__get_packed_size
                     (const GetSelfInfoResponse   *message);
size_t get_self_info_response__pack
                     (const GetSelfInfoResponse   *message,
                      uint8_t             *out);
size_t get_self_info_response__pack_to_buffer
                     (const GetSelfInfoResponse   *message,
                      ProtobufCBuffer     *buffer);
GetSelfInfoResponse *
       get_self_info_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_self_info_response__free_unpacked
                     (GetSelfInfoResponse *message,
                      ProtobufCAllocator *allocator);
/* QueryPresenceRequest methods */
void   query_presence_request__init
                     (QueryPresenceRequest         *message);
size_t query_presence_request__get_packed_size
                     (const QueryPresenceRequest   *message);
size_t query_presence_request__pack
                     (const QueryPresenceRequest   *message,
                      uint8_t             *out);
size_t query_presence_request__pack_to_buffer
                     (const QueryPresenceRequest   *message,
                      ProtobufCBuffer     *buffer);
QueryPresenceRequest *
       query_presence_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   query_presence_request__free_unpacked
                     (QueryPresenceRequest *message,
                      ProtobufCAllocator *allocator);
/* QueryPresenceResponse methods */
void   query_presence_response__init
                     (QueryPresenceResponse         *message);
size_t query_presence_response__get_packed_size
                     (const QueryPresenceResponse   *message);
size_t query_presence_response__pack
                     (const QueryPresenceResponse   *message,
                      uint8_t             *out);
size_t query_presence_response__pack_to_buffer
                     (const QueryPresenceResponse   *message,
                      ProtobufCBuffer     *buffer);
QueryPresenceResponse *
       query_presence_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   query_presence_response__free_unpacked
                     (QueryPresenceResponse *message,
                      ProtobufCAllocator *allocator);
/* RemoveUserRequest methods */
void   remove_user_request__init
                     (RemoveUserRequest         *message);
size_t remove_user_request__get_packed_size
                     (const RemoveUserRequest   *message);
size_t remove_user_request__pack
                     (const RemoveUserRequest   *message,
                      uint8_t             *out);
size_t remove_user_request__pack_to_buffer
                     (const RemoveUserRequest   *message,
                      ProtobufCBuffer     *buffer);
RemoveUserRequest *
       remove_user_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   remove_user_request__free_unpacked
                     (RemoveUserRequest *message,
                      ProtobufCAllocator *allocator);
/* RemoveUserResponse methods */
void   remove_user_response__init
                     (RemoveUserResponse         *message);
size_t remove_user_response__get_packed_size
                     (const RemoveUserResponse   *message);
size_t remove_user_response__pack
                     (const RemoveUserResponse   *message,
                      uint8_t             *out);
size_t remove_user_response__pack_to_buffer
                     (const RemoveUserResponse   *message,
                      ProtobufCBuffer     *buffer);
RemoveUserResponse *
       remove_user_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   remove_user_response__free_unpacked
                     (RemoveUserResponse *message,
                      ProtobufCAllocator *allocator);
/* RenameConversationRequest methods */
void   rename_conversation_request__init
                     (RenameConversationRequest         *message);
size_t rename_conversation_request__get_packed_size
                     (const RenameConversationRequest   *message);
size_t rename_conversation_request__pack
                     (const RenameConversationRequest   *message,
                      uint8_t             *out);
size_t rename_conversation_request__pack_to_buffer
                     (const RenameConversationRequest   *message,
                      ProtobufCBuffer     *buffer);
RenameConversationRequest *
       rename_conversation_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rename_conversation_request__free_unpacked
                     (RenameConversationRequest *message,
                      ProtobufCAllocator *allocator);
/* RenameConversationResponse methods */
void   rename_conversation_response__init
                     (RenameConversationResponse         *message);
size_t rename_conversation_response__get_packed_size
                     (const RenameConversationResponse   *message);
size_t rename_conversation_response__pack
                     (const RenameConversationResponse   *message,
                      uint8_t             *out);
size_t rename_conversation_response__pack_to_buffer
                     (const RenameConversationResponse   *message,
                      ProtobufCBuffer     *buffer);
RenameConversationResponse *
       rename_conversation_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rename_conversation_response__free_unpacked
                     (RenameConversationResponse *message,
                      ProtobufCAllocator *allocator);
/* SearchEntitiesRequest methods */
void   search_entities_request__init
                     (SearchEntitiesRequest         *message);
size_t search_entities_request__get_packed_size
                     (const SearchEntitiesRequest   *message);
size_t search_entities_request__pack
                     (const SearchEntitiesRequest   *message,
                      uint8_t             *out);
size_t search_entities_request__pack_to_buffer
                     (const SearchEntitiesRequest   *message,
                      ProtobufCBuffer     *buffer);
SearchEntitiesRequest *
       search_entities_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   search_entities_request__free_unpacked
                     (SearchEntitiesRequest *message,
                      ProtobufCAllocator *allocator);
/* SearchEntitiesResponse methods */
void   search_entities_response__init
                     (SearchEntitiesResponse         *message);
size_t search_entities_response__get_packed_size
                     (const SearchEntitiesResponse   *message);
size_t search_entities_response__pack
                     (const SearchEntitiesResponse   *message,
                      uint8_t             *out);
size_t search_entities_response__pack_to_buffer
                     (const SearchEntitiesResponse   *message,
                      ProtobufCBuffer     *buffer);
SearchEntitiesResponse *
       search_entities_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   search_entities_response__free_unpacked
                     (SearchEntitiesResponse *message,
                      ProtobufCAllocator *allocator);
/* SendChatMessageRequest methods */
void   send_chat_message_request__init
                     (SendChatMessageRequest         *message);
size_t send_chat_message_request__get_packed_size
                     (const SendChatMessageRequest   *message);
size_t send_chat_message_request__pack
                     (const SendChatMessageRequest   *message,
                      uint8_t             *out);
size_t send_chat_message_request__pack_to_buffer
                     (const SendChatMessageRequest   *message,
                      ProtobufCBuffer     *buffer);
SendChatMessageRequest *
       send_chat_message_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   send_chat_message_request__free_unpacked
                     (SendChatMessageRequest *message,
                      ProtobufCAllocator *allocator);
/* SendChatMessageResponse methods */
void   send_chat_message_response__init
                     (SendChatMessageResponse         *message);
size_t send_chat_message_response__get_packed_size
                     (const SendChatMessageResponse   *message);
size_t send_chat_message_response__pack
                     (const SendChatMessageResponse   *message,
                      uint8_t             *out);
size_t send_chat_message_response__pack_to_buffer
                     (const SendChatMessageResponse   *message,
                      ProtobufCBuffer     *buffer);
SendChatMessageResponse *
       send_chat_message_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   send_chat_message_response__free_unpacked
                     (SendChatMessageResponse *message,
                      ProtobufCAllocator *allocator);
/* SetActiveClientRequest methods */
void   set_active_client_request__init
                     (SetActiveClientRequest         *message);
size_t set_active_client_request__get_packed_size
                     (const SetActiveClientRequest   *message);
size_t set_active_client_request__pack
                     (const SetActiveClientRequest   *message,
                      uint8_t             *out);
size_t set_active_client_request__pack_to_buffer
                     (const SetActiveClientRequest   *message,
                      ProtobufCBuffer     *buffer);
SetActiveClientRequest *
       set_active_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_active_client_request__free_unpacked
                     (SetActiveClientRequest *message,
                      ProtobufCAllocator *allocator);
/* SetActiveClientResponse methods */
void   set_active_client_response__init
                     (SetActiveClientResponse         *message);
size_t set_active_client_response__get_packed_size
                     (const SetActiveClientResponse   *message);
size_t set_active_client_response__pack
                     (const SetActiveClientResponse   *message,
                      uint8_t             *out);
size_t set_active_client_response__pack_to_buffer
                     (const SetActiveClientResponse   *message,
                      ProtobufCBuffer     *buffer);
SetActiveClientResponse *
       set_active_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_active_client_response__free_unpacked
                     (SetActiveClientResponse *message,
                      ProtobufCAllocator *allocator);
/* SetConversationLevelRequest methods */
void   set_conversation_level_request__init
                     (SetConversationLevelRequest         *message);
size_t set_conversation_level_request__get_packed_size
                     (const SetConversationLevelRequest   *message);
size_t set_conversation_level_request__pack
                     (const SetConversationLevelRequest   *message,
                      uint8_t             *out);
size_t set_conversation_level_request__pack_to_buffer
                     (const SetConversationLevelRequest   *message,
                      ProtobufCBuffer     *buffer);
SetConversationLevelRequest *
       set_conversation_level_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_conversation_level_request__free_unpacked
                     (SetConversationLevelRequest *message,
                      ProtobufCAllocator *allocator);
/* SetConversationLevelResponse methods */
void   set_conversation_level_response__init
                     (SetConversationLevelResponse         *message);
size_t set_conversation_level_response__get_packed_size
                     (const SetConversationLevelResponse   *message);
size_t set_conversation_level_response__pack
                     (const SetConversationLevelResponse   *message,
                      uint8_t             *out);
size_t set_conversation_level_response__pack_to_buffer
                     (const SetConversationLevelResponse   *message,
                      ProtobufCBuffer     *buffer);
SetConversationLevelResponse *
       set_conversation_level_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_conversation_level_response__free_unpacked
                     (SetConversationLevelResponse *message,
                      ProtobufCAllocator *allocator);
/* SetConversationNotificationLevelRequest methods */
void   set_conversation_notification_level_request__init
                     (SetConversationNotificationLevelRequest         *message);
size_t set_conversation_notification_level_request__get_packed_size
                     (const SetConversationNotificationLevelRequest   *message);
size_t set_conversation_notification_level_request__pack
                     (const SetConversationNotificationLevelRequest   *message,
                      uint8_t             *out);
size_t set_conversation_notification_level_request__pack_to_buffer
                     (const SetConversationNotificationLevelRequest   *message,
                      ProtobufCBuffer     *buffer);
SetConversationNotificationLevelRequest *
       set_conversation_notification_level_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_conversation_notification_level_request__free_unpacked
                     (SetConversationNotificationLevelRequest *message,
                      ProtobufCAllocator *allocator);
/* SetConversationNotificationLevelResponse methods */
void   set_conversation_notification_level_response__init
                     (SetConversationNotificationLevelResponse         *message);
size_t set_conversation_notification_level_response__get_packed_size
                     (const SetConversationNotificationLevelResponse   *message);
size_t set_conversation_notification_level_response__pack
                     (const SetConversationNotificationLevelResponse   *message,
                      uint8_t             *out);
size_t set_conversation_notification_level_response__pack_to_buffer
                     (const SetConversationNotificationLevelResponse   *message,
                      ProtobufCBuffer     *buffer);
SetConversationNotificationLevelResponse *
       set_conversation_notification_level_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_conversation_notification_level_response__free_unpacked
                     (SetConversationNotificationLevelResponse *message,
                      ProtobufCAllocator *allocator);
/* SetFocusRequest methods */
void   set_focus_request__init
                     (SetFocusRequest         *message);
size_t set_focus_request__get_packed_size
                     (const SetFocusRequest   *message);
size_t set_focus_request__pack
                     (const SetFocusRequest   *message,
                      uint8_t             *out);
size_t set_focus_request__pack_to_buffer
                     (const SetFocusRequest   *message,
                      ProtobufCBuffer     *buffer);
SetFocusRequest *
       set_focus_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_focus_request__free_unpacked
                     (SetFocusRequest *message,
                      ProtobufCAllocator *allocator);
/* SetFocusResponse methods */
void   set_focus_response__init
                     (SetFocusResponse         *message);
size_t set_focus_response__get_packed_size
                     (const SetFocusResponse   *message);
size_t set_focus_response__pack
                     (const SetFocusResponse   *message,
                      uint8_t             *out);
size_t set_focus_response__pack_to_buffer
                     (const SetFocusResponse   *message,
                      ProtobufCBuffer     *buffer);
SetFocusResponse *
       set_focus_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_focus_response__free_unpacked
                     (SetFocusResponse *message,
                      ProtobufCAllocator *allocator);
/* SetPresenceRequest methods */
void   set_presence_request__init
                     (SetPresenceRequest         *message);
size_t set_presence_request__get_packed_size
                     (const SetPresenceRequest   *message);
size_t set_presence_request__pack
                     (const SetPresenceRequest   *message,
                      uint8_t             *out);
size_t set_presence_request__pack_to_buffer
                     (const SetPresenceRequest   *message,
                      ProtobufCBuffer     *buffer);
SetPresenceRequest *
       set_presence_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_presence_request__free_unpacked
                     (SetPresenceRequest *message,
                      ProtobufCAllocator *allocator);
/* SetPresenceResponse methods */
void   set_presence_response__init
                     (SetPresenceResponse         *message);
size_t set_presence_response__get_packed_size
                     (const SetPresenceResponse   *message);
size_t set_presence_response__pack
                     (const SetPresenceResponse   *message,
                      uint8_t             *out);
size_t set_presence_response__pack_to_buffer
                     (const SetPresenceResponse   *message,
                      ProtobufCBuffer     *buffer);
SetPresenceResponse *
       set_presence_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_presence_response__free_unpacked
                     (SetPresenceResponse *message,
                      ProtobufCAllocator *allocator);
/* SetTypingRequest methods */
void   set_typing_request__init
                     (SetTypingRequest         *message);
size_t set_typing_request__get_packed_size
                     (const SetTypingRequest   *message);
size_t set_typing_request__pack
                     (const SetTypingRequest   *message,
                      uint8_t             *out);
size_t set_typing_request__pack_to_buffer
                     (const SetTypingRequest   *message,
                      ProtobufCBuffer     *buffer);
SetTypingRequest *
       set_typing_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_typing_request__free_unpacked
                     (SetTypingRequest *message,
                      ProtobufCAllocator *allocator);
/* SetTypingResponse methods */
void   set_typing_response__init
                     (SetTypingResponse         *message);
size_t set_typing_response__get_packed_size
                     (const SetTypingResponse   *message);
size_t set_typing_response__pack
                     (const SetTypingResponse   *message,
                      uint8_t             *out);
size_t set_typing_response__pack_to_buffer
                     (const SetTypingResponse   *message,
                      ProtobufCBuffer     *buffer);
SetTypingResponse *
       set_typing_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_typing_response__free_unpacked
                     (SetTypingResponse *message,
                      ProtobufCAllocator *allocator);
/* SyncAllNewEventsRequest methods */
void   sync_all_new_events_request__init
                     (SyncAllNewEventsRequest         *message);
size_t sync_all_new_events_request__get_packed_size
                     (const SyncAllNewEventsRequest   *message);
size_t sync_all_new_events_request__pack
                     (const SyncAllNewEventsRequest   *message,
                      uint8_t             *out);
size_t sync_all_new_events_request__pack_to_buffer
                     (const SyncAllNewEventsRequest   *message,
                      ProtobufCBuffer     *buffer);
SyncAllNewEventsRequest *
       sync_all_new_events_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sync_all_new_events_request__free_unpacked
                     (SyncAllNewEventsRequest *message,
                      ProtobufCAllocator *allocator);
/* SyncAllNewEventsResponse methods */
void   sync_all_new_events_response__init
                     (SyncAllNewEventsResponse         *message);
size_t sync_all_new_events_response__get_packed_size
                     (const SyncAllNewEventsResponse   *message);
size_t sync_all_new_events_response__pack
                     (const SyncAllNewEventsResponse   *message,
                      uint8_t             *out);
size_t sync_all_new_events_response__pack_to_buffer
                     (const SyncAllNewEventsResponse   *message,
                      ProtobufCBuffer     *buffer);
SyncAllNewEventsResponse *
       sync_all_new_events_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sync_all_new_events_response__free_unpacked
                     (SyncAllNewEventsResponse *message,
                      ProtobufCAllocator *allocator);
/* SyncRecentConversationsRequest methods */
void   sync_recent_conversations_request__init
                     (SyncRecentConversationsRequest         *message);
size_t sync_recent_conversations_request__get_packed_size
                     (const SyncRecentConversationsRequest   *message);
size_t sync_recent_conversations_request__pack
                     (const SyncRecentConversationsRequest   *message,
                      uint8_t             *out);
size_t sync_recent_conversations_request__pack_to_buffer
                     (const SyncRecentConversationsRequest   *message,
                      ProtobufCBuffer     *buffer);
SyncRecentConversationsRequest *
       sync_recent_conversations_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sync_recent_conversations_request__free_unpacked
                     (SyncRecentConversationsRequest *message,
                      ProtobufCAllocator *allocator);
/* SyncRecentConversationsResponse methods */
void   sync_recent_conversations_response__init
                     (SyncRecentConversationsResponse         *message);
size_t sync_recent_conversations_response__get_packed_size
                     (const SyncRecentConversationsResponse   *message);
size_t sync_recent_conversations_response__pack
                     (const SyncRecentConversationsResponse   *message,
                      uint8_t             *out);
size_t sync_recent_conversations_response__pack_to_buffer
                     (const SyncRecentConversationsResponse   *message,
                      ProtobufCBuffer     *buffer);
SyncRecentConversationsResponse *
       sync_recent_conversations_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sync_recent_conversations_response__free_unpacked
                     (SyncRecentConversationsResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateWatermarkRequest methods */
void   update_watermark_request__init
                     (UpdateWatermarkRequest         *message);
size_t update_watermark_request__get_packed_size
                     (const UpdateWatermarkRequest   *message);
size_t update_watermark_request__pack
                     (const UpdateWatermarkRequest   *message,
                      uint8_t             *out);
size_t update_watermark_request__pack_to_buffer
                     (const UpdateWatermarkRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateWatermarkRequest *
       update_watermark_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_watermark_request__free_unpacked
                     (UpdateWatermarkRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateWatermarkResponse methods */
void   update_watermark_response__init
                     (UpdateWatermarkResponse         *message);
size_t update_watermark_response__get_packed_size
                     (const UpdateWatermarkResponse   *message);
size_t update_watermark_response__pack
                     (const UpdateWatermarkResponse   *message,
                      uint8_t             *out);
size_t update_watermark_response__pack_to_buffer
                     (const UpdateWatermarkResponse   *message,
                      ProtobufCBuffer     *buffer);
UpdateWatermarkResponse *
       update_watermark_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_watermark_response__free_unpacked
                     (UpdateWatermarkResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*DoNotDisturbSetting_Closure)
                 (const DoNotDisturbSetting *message,
                  void *closure_data);
typedef void (*NotificationSettings_Closure)
                 (const NotificationSettings *message,
                  void *closure_data);
typedef void (*ConversationId_Closure)
                 (const ConversationId *message,
                  void *closure_data);
typedef void (*ParticipantId_Closure)
                 (const ParticipantId *message,
                  void *closure_data);
typedef void (*DeviceStatus_Closure)
                 (const DeviceStatus *message,
                  void *closure_data);
typedef void (*Presence_Closure)
                 (const Presence *message,
                  void *closure_data);
typedef void (*PresenceResult_Closure)
                 (const PresenceResult *message,
                  void *closure_data);
typedef void (*ClientIdentifier_Closure)
                 (const ClientIdentifier *message,
                  void *closure_data);
typedef void (*ClientPresenceState_Closure)
                 (const ClientPresenceState *message,
                  void *closure_data);
typedef void (*UserEventState_Closure)
                 (const UserEventState *message,
                  void *closure_data);
typedef void (*Formatting_Closure)
                 (const Formatting *message,
                  void *closure_data);
typedef void (*LinkData_Closure)
                 (const LinkData *message,
                  void *closure_data);
typedef void (*Segment_Closure)
                 (const Segment *message,
                  void *closure_data);
typedef void (*PlusPhoto__Thumbnail_Closure)
                 (const PlusPhoto__Thumbnail *message,
                  void *closure_data);
typedef void (*PlusPhoto_Closure)
                 (const PlusPhoto *message,
                  void *closure_data);
typedef void (*Place__RepresentativeImage_Closure)
                 (const Place__RepresentativeImage *message,
                  void *closure_data);
typedef void (*Place_Closure)
                 (const Place *message,
                  void *closure_data);
typedef void (*EmbedItem_Closure)
                 (const EmbedItem *message,
                  void *closure_data);
typedef void (*Attachment_Closure)
                 (const Attachment *message,
                  void *closure_data);
typedef void (*MessageContent_Closure)
                 (const MessageContent *message,
                  void *closure_data);
typedef void (*EventAnnotation_Closure)
                 (const EventAnnotation *message,
                  void *closure_data);
typedef void (*ChatMessage_Closure)
                 (const ChatMessage *message,
                  void *closure_data);
typedef void (*MembershipChange_Closure)
                 (const MembershipChange *message,
                  void *closure_data);
typedef void (*ConversationRename_Closure)
                 (const ConversationRename *message,
                  void *closure_data);
typedef void (*HangoutEvent_Closure)
                 (const HangoutEvent *message,
                  void *closure_data);
typedef void (*OTRModification_Closure)
                 (const OTRModification *message,
                  void *closure_data);
typedef void (*HashModifier_Closure)
                 (const HashModifier *message,
                  void *closure_data);
typedef void (*Event_Closure)
                 (const Event *message,
                  void *closure_data);
typedef void (*UserReadState_Closure)
                 (const UserReadState *message,
                  void *closure_data);
typedef void (*DeliveryMedium_Closure)
                 (const DeliveryMedium *message,
                  void *closure_data);
typedef void (*DeliveryMediumOption_Closure)
                 (const DeliveryMediumOption *message,
                  void *closure_data);
typedef void (*UserConversationState_Closure)
                 (const UserConversationState *message,
                  void *closure_data);
typedef void (*ConversationParticipantData_Closure)
                 (const ConversationParticipantData *message,
                  void *closure_data);
typedef void (*Conversation_Closure)
                 (const Conversation *message,
                  void *closure_data);
typedef void (*EasterEgg_Closure)
                 (const EasterEgg *message,
                  void *closure_data);
typedef void (*BlockStateChange_Closure)
                 (const BlockStateChange *message,
                  void *closure_data);
typedef void (*Photo_Closure)
                 (const Photo *message,
                  void *closure_data);
typedef void (*ExistingMedia_Closure)
                 (const ExistingMedia *message,
                  void *closure_data);
typedef void (*EventRequestHeader_Closure)
                 (const EventRequestHeader *message,
                  void *closure_data);
typedef void (*ClientVersion_Closure)
                 (const ClientVersion *message,
                  void *closure_data);
typedef void (*RequestHeader_Closure)
                 (const RequestHeader *message,
                  void *closure_data);
typedef void (*ResponseHeader_Closure)
                 (const ResponseHeader *message,
                  void *closure_data);
typedef void (*Entity_Closure)
                 (const Entity *message,
                  void *closure_data);
typedef void (*EntityProperties_Closure)
                 (const EntityProperties *message,
                  void *closure_data);
typedef void (*ConversationState_Closure)
                 (const ConversationState *message,
                  void *closure_data);
typedef void (*EventContinuationToken_Closure)
                 (const EventContinuationToken *message,
                  void *closure_data);
typedef void (*EntityLookupSpec_Closure)
                 (const EntityLookupSpec *message,
                  void *closure_data);
typedef void (*ConfigurationBit_Closure)
                 (const ConfigurationBit *message,
                  void *closure_data);
typedef void (*RichPresenceState_Closure)
                 (const RichPresenceState *message,
                  void *closure_data);
typedef void (*RichPresenceEnabledState_Closure)
                 (const RichPresenceEnabledState *message,
                  void *closure_data);
typedef void (*DesktopOffSetting_Closure)
                 (const DesktopOffSetting *message,
                  void *closure_data);
typedef void (*DesktopOffState_Closure)
                 (const DesktopOffState *message,
                  void *closure_data);
typedef void (*DndSetting_Closure)
                 (const DndSetting *message,
                  void *closure_data);
typedef void (*PresenceStateSetting_Closure)
                 (const PresenceStateSetting *message,
                  void *closure_data);
typedef void (*MoodMessage_Closure)
                 (const MoodMessage *message,
                  void *closure_data);
typedef void (*MoodContent_Closure)
                 (const MoodContent *message,
                  void *closure_data);
typedef void (*MoodSetting_Closure)
                 (const MoodSetting *message,
                  void *closure_data);
typedef void (*MoodState_Closure)
                 (const MoodState *message,
                  void *closure_data);
typedef void (*DeleteAction_Closure)
                 (const DeleteAction *message,
                  void *closure_data);
typedef void (*InviteeID_Closure)
                 (const InviteeID *message,
                  void *closure_data);
typedef void (*Country_Closure)
                 (const Country *message,
                  void *closure_data);
typedef void (*DesktopSoundSetting_Closure)
                 (const DesktopSoundSetting *message,
                  void *closure_data);
typedef void (*PhoneData_Closure)
                 (const PhoneData *message,
                  void *closure_data);
typedef void (*Phone_Closure)
                 (const Phone *message,
                  void *closure_data);
typedef void (*I18nData_Closure)
                 (const I18nData *message,
                  void *closure_data);
typedef void (*PhoneNumber_Closure)
                 (const PhoneNumber *message,
                  void *closure_data);
typedef void (*SuggestedContactGroupHash_Closure)
                 (const SuggestedContactGroupHash *message,
                  void *closure_data);
typedef void (*SuggestedContact_Closure)
                 (const SuggestedContact *message,
                  void *closure_data);
typedef void (*SuggestedContactGroup_Closure)
                 (const SuggestedContactGroup *message,
                  void *closure_data);
typedef void (*StateUpdate_Closure)
                 (const StateUpdate *message,
                  void *closure_data);
typedef void (*StateUpdateHeader_Closure)
                 (const StateUpdateHeader *message,
                  void *closure_data);
typedef void (*BatchUpdate_Closure)
                 (const BatchUpdate *message,
                  void *closure_data);
typedef void (*EventNotification_Closure)
                 (const EventNotification *message,
                  void *closure_data);
typedef void (*SetFocusNotification_Closure)
                 (const SetFocusNotification *message,
                  void *closure_data);
typedef void (*SetTypingNotification_Closure)
                 (const SetTypingNotification *message,
                  void *closure_data);
typedef void (*SetConversationNotificationLevelNotification_Closure)
                 (const SetConversationNotificationLevelNotification *message,
                  void *closure_data);
typedef void (*ReplyToInviteNotification_Closure)
                 (const ReplyToInviteNotification *message,
                  void *closure_data);
typedef void (*WatermarkNotification_Closure)
                 (const WatermarkNotification *message,
                  void *closure_data);
typedef void (*ConversationViewModification_Closure)
                 (const ConversationViewModification *message,
                  void *closure_data);
typedef void (*EasterEggNotification_Closure)
                 (const EasterEggNotification *message,
                  void *closure_data);
typedef void (*SelfPresenceNotification_Closure)
                 (const SelfPresenceNotification *message,
                  void *closure_data);
typedef void (*DeleteActionNotification_Closure)
                 (const DeleteActionNotification *message,
                  void *closure_data);
typedef void (*PresenceNotification_Closure)
                 (const PresenceNotification *message,
                  void *closure_data);
typedef void (*BlockNotification_Closure)
                 (const BlockNotification *message,
                  void *closure_data);
typedef void (*SetNotificationSettingNotification_Closure)
                 (const SetNotificationSettingNotification *message,
                  void *closure_data);
typedef void (*RichPresenceEnabledStateNotification_Closure)
                 (const RichPresenceEnabledStateNotification *message,
                  void *closure_data);
typedef void (*ConversationSpec_Closure)
                 (const ConversationSpec *message,
                  void *closure_data);
typedef void (*AddUserRequest_Closure)
                 (const AddUserRequest *message,
                  void *closure_data);
typedef void (*AddUserResponse_Closure)
                 (const AddUserResponse *message,
                  void *closure_data);
typedef void (*CreateConversationRequest_Closure)
                 (const CreateConversationRequest *message,
                  void *closure_data);
typedef void (*CreateConversationResponse_Closure)
                 (const CreateConversationResponse *message,
                  void *closure_data);
typedef void (*DeleteConversationRequest_Closure)
                 (const DeleteConversationRequest *message,
                  void *closure_data);
typedef void (*DeleteConversationResponse_Closure)
                 (const DeleteConversationResponse *message,
                  void *closure_data);
typedef void (*EasterEggRequest_Closure)
                 (const EasterEggRequest *message,
                  void *closure_data);
typedef void (*EasterEggResponse_Closure)
                 (const EasterEggResponse *message,
                  void *closure_data);
typedef void (*GetConversationRequest_Closure)
                 (const GetConversationRequest *message,
                  void *closure_data);
typedef void (*GetConversationResponse_Closure)
                 (const GetConversationResponse *message,
                  void *closure_data);
typedef void (*GetEntityByIdRequest_Closure)
                 (const GetEntityByIdRequest *message,
                  void *closure_data);
typedef void (*GetEntityByIdResponse_Closure)
                 (const GetEntityByIdResponse *message,
                  void *closure_data);
typedef void (*GetSuggestedEntitiesRequest_Closure)
                 (const GetSuggestedEntitiesRequest *message,
                  void *closure_data);
typedef void (*GetSuggestedEntitiesResponse_Closure)
                 (const GetSuggestedEntitiesResponse *message,
                  void *closure_data);
typedef void (*GetSelfInfoRequest_Closure)
                 (const GetSelfInfoRequest *message,
                  void *closure_data);
typedef void (*GetSelfInfoResponse_Closure)
                 (const GetSelfInfoResponse *message,
                  void *closure_data);
typedef void (*QueryPresenceRequest_Closure)
                 (const QueryPresenceRequest *message,
                  void *closure_data);
typedef void (*QueryPresenceResponse_Closure)
                 (const QueryPresenceResponse *message,
                  void *closure_data);
typedef void (*RemoveUserRequest_Closure)
                 (const RemoveUserRequest *message,
                  void *closure_data);
typedef void (*RemoveUserResponse_Closure)
                 (const RemoveUserResponse *message,
                  void *closure_data);
typedef void (*RenameConversationRequest_Closure)
                 (const RenameConversationRequest *message,
                  void *closure_data);
typedef void (*RenameConversationResponse_Closure)
                 (const RenameConversationResponse *message,
                  void *closure_data);
typedef void (*SearchEntitiesRequest_Closure)
                 (const SearchEntitiesRequest *message,
                  void *closure_data);
typedef void (*SearchEntitiesResponse_Closure)
                 (const SearchEntitiesResponse *message,
                  void *closure_data);
typedef void (*SendChatMessageRequest_Closure)
                 (const SendChatMessageRequest *message,
                  void *closure_data);
typedef void (*SendChatMessageResponse_Closure)
                 (const SendChatMessageResponse *message,
                  void *closure_data);
typedef void (*SetActiveClientRequest_Closure)
                 (const SetActiveClientRequest *message,
                  void *closure_data);
typedef void (*SetActiveClientResponse_Closure)
                 (const SetActiveClientResponse *message,
                  void *closure_data);
typedef void (*SetConversationLevelRequest_Closure)
                 (const SetConversationLevelRequest *message,
                  void *closure_data);
typedef void (*SetConversationLevelResponse_Closure)
                 (const SetConversationLevelResponse *message,
                  void *closure_data);
typedef void (*SetConversationNotificationLevelRequest_Closure)
                 (const SetConversationNotificationLevelRequest *message,
                  void *closure_data);
typedef void (*SetConversationNotificationLevelResponse_Closure)
                 (const SetConversationNotificationLevelResponse *message,
                  void *closure_data);
typedef void (*SetFocusRequest_Closure)
                 (const SetFocusRequest *message,
                  void *closure_data);
typedef void (*SetFocusResponse_Closure)
                 (const SetFocusResponse *message,
                  void *closure_data);
typedef void (*SetPresenceRequest_Closure)
                 (const SetPresenceRequest *message,
                  void *closure_data);
typedef void (*SetPresenceResponse_Closure)
                 (const SetPresenceResponse *message,
                  void *closure_data);
typedef void (*SetTypingRequest_Closure)
                 (const SetTypingRequest *message,
                  void *closure_data);
typedef void (*SetTypingResponse_Closure)
                 (const SetTypingResponse *message,
                  void *closure_data);
typedef void (*SyncAllNewEventsRequest_Closure)
                 (const SyncAllNewEventsRequest *message,
                  void *closure_data);
typedef void (*SyncAllNewEventsResponse_Closure)
                 (const SyncAllNewEventsResponse *message,
                  void *closure_data);
typedef void (*SyncRecentConversationsRequest_Closure)
                 (const SyncRecentConversationsRequest *message,
                  void *closure_data);
typedef void (*SyncRecentConversationsResponse_Closure)
                 (const SyncRecentConversationsResponse *message,
                  void *closure_data);
typedef void (*UpdateWatermarkRequest_Closure)
                 (const UpdateWatermarkRequest *message,
                  void *closure_data);
typedef void (*UpdateWatermarkResponse_Closure)
                 (const UpdateWatermarkResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    active_client_state__descriptor;
extern const ProtobufCEnumDescriptor    focus_type__descriptor;
extern const ProtobufCEnumDescriptor    focus_device__descriptor;
extern const ProtobufCEnumDescriptor    typing_type__descriptor;
extern const ProtobufCEnumDescriptor    client_presence_state_type__descriptor;
extern const ProtobufCEnumDescriptor    notification_level__descriptor;
extern const ProtobufCEnumDescriptor    segment_type__descriptor;
extern const ProtobufCEnumDescriptor    item_type__descriptor;
extern const ProtobufCEnumDescriptor    membership_change_type__descriptor;
extern const ProtobufCEnumDescriptor    hangout_event_type__descriptor;
extern const ProtobufCEnumDescriptor    off_the_record_toggle__descriptor;
extern const ProtobufCEnumDescriptor    off_the_record_status__descriptor;
extern const ProtobufCEnumDescriptor    source_type__descriptor;
extern const ProtobufCEnumDescriptor    event_type__descriptor;
extern const ProtobufCEnumDescriptor    conversation_type__descriptor;
extern const ProtobufCEnumDescriptor    conversation_status__descriptor;
extern const ProtobufCEnumDescriptor    conversation_view__descriptor;
extern const ProtobufCEnumDescriptor    delivery_medium_type__descriptor;
extern const ProtobufCEnumDescriptor    participant_type__descriptor;
extern const ProtobufCEnumDescriptor    invitation_status__descriptor;
extern const ProtobufCEnumDescriptor    force_history__descriptor;
extern const ProtobufCEnumDescriptor    network_type__descriptor;
extern const ProtobufCEnumDescriptor    block_state__descriptor;
extern const ProtobufCEnumDescriptor    reply_to_invite_type__descriptor;
extern const ProtobufCEnumDescriptor    client_id__descriptor;
extern const ProtobufCEnumDescriptor    client_build_type__descriptor;
extern const ProtobufCEnumDescriptor    response_status__descriptor;
extern const ProtobufCEnumDescriptor    photo_url_status__descriptor;
extern const ProtobufCEnumDescriptor    gender__descriptor;
extern const ProtobufCEnumDescriptor    profile_type__descriptor;
extern const ProtobufCEnumDescriptor    configuration_bit_type__descriptor;
extern const ProtobufCEnumDescriptor    rich_presence_type__descriptor;
extern const ProtobufCEnumDescriptor    field_mask__descriptor;
extern const ProtobufCEnumDescriptor    delete_type__descriptor;
extern const ProtobufCEnumDescriptor    sync_filter__descriptor;
extern const ProtobufCEnumDescriptor    sound_state__descriptor;
extern const ProtobufCEnumDescriptor    caller_id_settings_mask__descriptor;
extern const ProtobufCEnumDescriptor    phone_verification_status__descriptor;
extern const ProtobufCEnumDescriptor    phone_discoverability_status__descriptor;
extern const ProtobufCEnumDescriptor    phone_validation_result__descriptor;
extern const ProtobufCMessageDescriptor do_not_disturb_setting__descriptor;
extern const ProtobufCMessageDescriptor notification_settings__descriptor;
extern const ProtobufCMessageDescriptor conversation_id__descriptor;
extern const ProtobufCMessageDescriptor participant_id__descriptor;
extern const ProtobufCMessageDescriptor device_status__descriptor;
extern const ProtobufCMessageDescriptor presence__descriptor;
extern const ProtobufCMessageDescriptor presence_result__descriptor;
extern const ProtobufCMessageDescriptor client_identifier__descriptor;
extern const ProtobufCMessageDescriptor client_presence_state__descriptor;
extern const ProtobufCMessageDescriptor user_event_state__descriptor;
extern const ProtobufCMessageDescriptor formatting__descriptor;
extern const ProtobufCMessageDescriptor link_data__descriptor;
extern const ProtobufCMessageDescriptor segment__descriptor;
extern const ProtobufCMessageDescriptor plus_photo__descriptor;
extern const ProtobufCMessageDescriptor plus_photo__thumbnail__descriptor;
extern const ProtobufCEnumDescriptor    plus_photo__media_type__descriptor;
extern const ProtobufCMessageDescriptor place__descriptor;
extern const ProtobufCMessageDescriptor place__representative_image__descriptor;
extern const ProtobufCMessageDescriptor embed_item__descriptor;
extern const ProtobufCMessageDescriptor attachment__descriptor;
extern const ProtobufCMessageDescriptor message_content__descriptor;
extern const ProtobufCMessageDescriptor event_annotation__descriptor;
extern const ProtobufCMessageDescriptor chat_message__descriptor;
extern const ProtobufCMessageDescriptor membership_change__descriptor;
extern const ProtobufCMessageDescriptor conversation_rename__descriptor;
extern const ProtobufCMessageDescriptor hangout_event__descriptor;
extern const ProtobufCMessageDescriptor otrmodification__descriptor;
extern const ProtobufCMessageDescriptor hash_modifier__descriptor;
extern const ProtobufCMessageDescriptor event__descriptor;
extern const ProtobufCMessageDescriptor user_read_state__descriptor;
extern const ProtobufCMessageDescriptor delivery_medium__descriptor;
extern const ProtobufCMessageDescriptor delivery_medium_option__descriptor;
extern const ProtobufCMessageDescriptor user_conversation_state__descriptor;
extern const ProtobufCMessageDescriptor conversation_participant_data__descriptor;
extern const ProtobufCMessageDescriptor conversation__descriptor;
extern const ProtobufCMessageDescriptor easter_egg__descriptor;
extern const ProtobufCMessageDescriptor block_state_change__descriptor;
extern const ProtobufCMessageDescriptor photo__descriptor;
extern const ProtobufCMessageDescriptor existing_media__descriptor;
extern const ProtobufCMessageDescriptor event_request_header__descriptor;
extern const ProtobufCMessageDescriptor client_version__descriptor;
extern const ProtobufCMessageDescriptor request_header__descriptor;
extern const ProtobufCMessageDescriptor response_header__descriptor;
extern const ProtobufCMessageDescriptor entity__descriptor;
extern const ProtobufCEnumDescriptor    entity__past_hangout_state__descriptor;
extern const ProtobufCMessageDescriptor entity_properties__descriptor;
extern const ProtobufCMessageDescriptor conversation_state__descriptor;
extern const ProtobufCMessageDescriptor event_continuation_token__descriptor;
extern const ProtobufCMessageDescriptor entity_lookup_spec__descriptor;
extern const ProtobufCMessageDescriptor configuration_bit__descriptor;
extern const ProtobufCMessageDescriptor rich_presence_state__descriptor;
extern const ProtobufCMessageDescriptor rich_presence_enabled_state__descriptor;
extern const ProtobufCMessageDescriptor desktop_off_setting__descriptor;
extern const ProtobufCMessageDescriptor desktop_off_state__descriptor;
extern const ProtobufCMessageDescriptor dnd_setting__descriptor;
extern const ProtobufCMessageDescriptor presence_state_setting__descriptor;
extern const ProtobufCMessageDescriptor mood_message__descriptor;
extern const ProtobufCMessageDescriptor mood_content__descriptor;
extern const ProtobufCMessageDescriptor mood_setting__descriptor;
extern const ProtobufCMessageDescriptor mood_state__descriptor;
extern const ProtobufCMessageDescriptor delete_action__descriptor;
extern const ProtobufCMessageDescriptor invitee_id__descriptor;
extern const ProtobufCMessageDescriptor country__descriptor;
extern const ProtobufCMessageDescriptor desktop_sound_setting__descriptor;
extern const ProtobufCMessageDescriptor phone_data__descriptor;
extern const ProtobufCMessageDescriptor phone__descriptor;
extern const ProtobufCMessageDescriptor i18n_data__descriptor;
extern const ProtobufCMessageDescriptor phone_number__descriptor;
extern const ProtobufCMessageDescriptor suggested_contact_group_hash__descriptor;
extern const ProtobufCMessageDescriptor suggested_contact__descriptor;
extern const ProtobufCMessageDescriptor suggested_contact_group__descriptor;
extern const ProtobufCMessageDescriptor state_update__descriptor;
extern const ProtobufCMessageDescriptor state_update_header__descriptor;
extern const ProtobufCMessageDescriptor batch_update__descriptor;
extern const ProtobufCMessageDescriptor event_notification__descriptor;
extern const ProtobufCMessageDescriptor set_focus_notification__descriptor;
extern const ProtobufCMessageDescriptor set_typing_notification__descriptor;
extern const ProtobufCMessageDescriptor set_conversation_notification_level_notification__descriptor;
extern const ProtobufCMessageDescriptor reply_to_invite_notification__descriptor;
extern const ProtobufCMessageDescriptor watermark_notification__descriptor;
extern const ProtobufCMessageDescriptor conversation_view_modification__descriptor;
extern const ProtobufCMessageDescriptor easter_egg_notification__descriptor;
extern const ProtobufCMessageDescriptor self_presence_notification__descriptor;
extern const ProtobufCMessageDescriptor delete_action_notification__descriptor;
extern const ProtobufCMessageDescriptor presence_notification__descriptor;
extern const ProtobufCMessageDescriptor block_notification__descriptor;
extern const ProtobufCMessageDescriptor set_notification_setting_notification__descriptor;
extern const ProtobufCMessageDescriptor rich_presence_enabled_state_notification__descriptor;
extern const ProtobufCMessageDescriptor conversation_spec__descriptor;
extern const ProtobufCMessageDescriptor add_user_request__descriptor;
extern const ProtobufCMessageDescriptor add_user_response__descriptor;
extern const ProtobufCMessageDescriptor create_conversation_request__descriptor;
extern const ProtobufCMessageDescriptor create_conversation_response__descriptor;
extern const ProtobufCMessageDescriptor delete_conversation_request__descriptor;
extern const ProtobufCMessageDescriptor delete_conversation_response__descriptor;
extern const ProtobufCMessageDescriptor easter_egg_request__descriptor;
extern const ProtobufCMessageDescriptor easter_egg_response__descriptor;
extern const ProtobufCMessageDescriptor get_conversation_request__descriptor;
extern const ProtobufCMessageDescriptor get_conversation_response__descriptor;
extern const ProtobufCMessageDescriptor get_entity_by_id_request__descriptor;
extern const ProtobufCMessageDescriptor get_entity_by_id_response__descriptor;
extern const ProtobufCMessageDescriptor get_suggested_entities_request__descriptor;
extern const ProtobufCMessageDescriptor get_suggested_entities_response__descriptor;
extern const ProtobufCMessageDescriptor get_self_info_request__descriptor;
extern const ProtobufCMessageDescriptor get_self_info_response__descriptor;
extern const ProtobufCMessageDescriptor query_presence_request__descriptor;
extern const ProtobufCMessageDescriptor query_presence_response__descriptor;
extern const ProtobufCMessageDescriptor remove_user_request__descriptor;
extern const ProtobufCMessageDescriptor remove_user_response__descriptor;
extern const ProtobufCMessageDescriptor rename_conversation_request__descriptor;
extern const ProtobufCMessageDescriptor rename_conversation_response__descriptor;
extern const ProtobufCMessageDescriptor search_entities_request__descriptor;
extern const ProtobufCMessageDescriptor search_entities_response__descriptor;
extern const ProtobufCMessageDescriptor send_chat_message_request__descriptor;
extern const ProtobufCMessageDescriptor send_chat_message_response__descriptor;
extern const ProtobufCMessageDescriptor set_active_client_request__descriptor;
extern const ProtobufCMessageDescriptor set_active_client_response__descriptor;
extern const ProtobufCMessageDescriptor set_conversation_level_request__descriptor;
extern const ProtobufCMessageDescriptor set_conversation_level_response__descriptor;
extern const ProtobufCMessageDescriptor set_conversation_notification_level_request__descriptor;
extern const ProtobufCMessageDescriptor set_conversation_notification_level_response__descriptor;
extern const ProtobufCMessageDescriptor set_focus_request__descriptor;
extern const ProtobufCMessageDescriptor set_focus_response__descriptor;
extern const ProtobufCMessageDescriptor set_presence_request__descriptor;
extern const ProtobufCMessageDescriptor set_presence_response__descriptor;
extern const ProtobufCMessageDescriptor set_typing_request__descriptor;
extern const ProtobufCMessageDescriptor set_typing_response__descriptor;
extern const ProtobufCMessageDescriptor sync_all_new_events_request__descriptor;
extern const ProtobufCMessageDescriptor sync_all_new_events_response__descriptor;
extern const ProtobufCMessageDescriptor sync_recent_conversations_request__descriptor;
extern const ProtobufCMessageDescriptor sync_recent_conversations_response__descriptor;
extern const ProtobufCMessageDescriptor update_watermark_request__descriptor;
extern const ProtobufCMessageDescriptor update_watermark_response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_hangouts_2eproto__INCLUDED */
